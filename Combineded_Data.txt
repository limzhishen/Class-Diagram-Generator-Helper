{"filename": "athena_repository.py", "name": "AthenaRepository", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" connection: AthenaDataSource", " db: str"]}, {"name": "execute_query", "type": "", "parameter": [" query: str"]}, {"name": "get_pdp_uniquepageviews_for_trending_products", "type": "", "parameter": [" cc: str", " days: int"]}, {"name": "get_data_science_score_for_selling_products", "type": "", "parameter": [" cc: str", " date: str"]}, {"name": "get_secondhand_selling_products_score", "type": "", "parameter": [" cc: str", " date: str"]}], "attributes": [{"name": "connection", "type": "", "access_type": ""}, {"name": "db", "type": "", "access_type": ""}, {"name": "MAX_RETRY", "type": "", "access_type": ""}, {"name": "DELAY_TIME", "type": "", "access_type": ""}]}

{"filename": "cassandra_repository.py", "name": "CassandraRepository", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" connection: Session"]}, {"name": "upsert", "type": "", "parameter": [" key: str", " data: list"]}], "attributes": [{"name": "connection", "type": "", "access_type": ""}]}

{"filename": "datastore.py", "name": "DataStore", "type": "class", "implement": [], "extend": ["(object", " metaclass=ABCMeta)"], "method": [{"name": "read", "type": "", "parameter": [" path: str"]}, {"name": "store", "type": "", "parameter": [" data_frame: pandas.DataFrame", " path: str", " *args", " format: FORMAT = FORMAT.PARQUET_PARTION", " **kwargs"]}, {"name": "put_tags", "type": "", "parameter": [" path: str", " tags: dict"]}, {"name": "store_csv", "type": "", "parameter": [" data: list", " path: str"]}, {"name": "store_json", "type": "", "parameter": [" data: list", " path: str"]}, {"name": "exists", "type": "", "parameter": [" path: str"]}, {"name": "empty", "type": "", "parameter": [" path: str"]}, {"name": "update", "type": "", "parameter": [" data: list", " path: str"]}], "attributes": []}

{"filename": "s3.py", "name": "S3Storage", "type": "class", "implement": [], "extend": ["(DataStore", " metaclass=ABCMeta)"], "method": [{"name": "__init__", "type": "", "parameter": [" s3_client: s3fs.S3FileSystem"]}, {"name": "read", "type": "", "parameter": [" path: str", " *", " default=pandas.DataFrame("]}, {"name": "store", "type": "", "parameter": [" data_frame: pandas.DataFrame", " path: str", " *", " format: Union[FORMAT", " str] = FORMAT.PARQUET_PARTION", " **kwargs"]}, {"name": "put_tags", "type": "", "parameter": [" path: str", " tags: dict", " mode='o'"]}, {"name": "store_csv", "type": "", "parameter": [" data: list", " path: str"]}, {"name": "store_json", "type": "", "parameter": [" data: list", " path: str"]}, {"name": "exists", "type": "", "parameter": [" path: str"]}, {"name": "empty", "type": "", "parameter": [" path: str"]}, {"name": "update", "type": "", "parameter": [" data: list", " path: str"]}, {"name": "__store_to_stdout_csv", "type": "", "parameter": [" data_frame: pandas.DataFrame", " path: str", " *args", " **kwargs"]}, {"name": "__store_to_parquet", "type": "", "parameter": [" data_frame: pandas.DataFrame", " path: str", " **kwargs"]}, {"name": "__store_to_parquet_partition", "type": "", "parameter": [" data_frame: pandas.DataFrame", " path: str", " **kwargs"]}], "attributes": [{"name": "s3_client", "type": "", "access_type": ""}]}

{"filename": "trending_plp_repository.py", "name": "TrendingPlpRepository", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" connection: CassandraFactory"]}, {"name": "create", "type": "", "parameter": [" data: list"]}, {"name": "truncate", "type": "", "parameter": []}], "attributes": [{"name": "connection", "type": "", "access_type": ""}]}

{"filename": "migrate.py", "name": "Migrate", "type": "class", "implement": [], "extend": [], "method": [{"name": "run", "type": "", "parameter": []}], "attributes": []}

{"filename": "table_schema_interface.py", "name": "TableSchemaInterface", "type": "class", "implement": [], "extend": [], "method": [{"name": "create", "type": "", "parameter": []}], "attributes": []}

{"filename": "athena_partner_factory.py", "name": "QueryFactory", "type": "class", "implement": [], "extend": ["()"], "method": [{"name": "__init__", "type": "", "parameter": [" cc: str"]}, {"name": "get_query_object", "type": "", "parameter": [" **kargs"]}], "attributes": [{"name": "cc", "type": "", "access_type": ""}]}

{"filename": "azure_client_factory.py", "name": "AzureClientFactory", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" config: RawConfigParser"]}, {"name": "get_data_factory_client", "type": "", "parameter": []}, {"name": "get_credential", "type": "", "parameter": []}], "attributes": [{"name": "config", "type": "", "access_type": ""}, {"name": "instance", "type": "", "access_type": ""}, {"name": "credential", "type": "", "access_type": ""}]}

{"filename": "boto3factory.py", "name": "Boto3Factory", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "get_sqs_client", "type": "", "parameter": []}, {"name": "get_athena_client", "type": "", "parameter": []}, {"name": "get_glue_client", "type": "", "parameter": []}, {"name": "get_s3_client", "type": "", "parameter": []}], "attributes": []}

{"filename": "cassandra_factory.py", "name": "CassandraFactory", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "__create", "type": "", "parameter": [" country: str"]}, {"name": "connection", "type": "", "parameter": [" country: str"]}, {"name": "cluster", "type": "", "parameter": []}], "attributes": [{"name": "host", "type": "", "access_type": ""}, {"name": "__connections", "type": "", "access_type": ""}, {"name": "__create", "type": "", "access_type": ""}]}

{"filename": "esfactory.py", "name": "ES", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" recursive=True"]}, {"name": "loads", "type": "", "parameter": [" s"]}, {"name": "__init__", "type": "", "parameter": [" es_type", " config", " **kwargs"]}], "attributes": [{"name": "recursive", "type": "", "access_type": ""}]}

{"filename": "s3factory.py", "name": "S3Factory", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "get_client", "type": "", "parameter": []}], "attributes": []}

{"filename": "constant.py", "name": "Merchant", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" query_id: str"]}, {"name": "update_query_state", "type": "", "parameter": [" query_state: str"]}, {"name": "get_query_id", "type": "", "parameter": []}, {"name": "get_query_state", "type": "", "parameter": []}, {"name": "is_init_state", "type": "", "parameter": []}, {"name": "__init__", "type": "", "parameter": [" id", " feed"]}, {"name": "id", "type": "", "parameter": []}, {"name": "feed", "type": "", "parameter": []}, {"name": "format_id", "type": "", "parameter": []}, {"name": "set_datafeed", "type": "", "parameter": [" data_feed: DataFeed"]}, {"name": "set_datafeed_querystate", "type": "", "parameter": [" state: str"]}, {"name": "get_datafeed_queryid", "type": "", "parameter": []}, {"name": "get_datafeed_querystate", "type": "", "parameter": []}, {"name": "is_datafeed_querystate_initial", "type": "", "parameter": []}], "attributes": [{"name": "__query_id", "type": "", "access_type": ""}, {"name": "__query_state", "type": "", "access_type": ""}, {"name": "__id", "type": "", "access_type": ""}, {"name": "__feed", "type": "", "access_type": ""}, {"name": "__data_feed", "type": "", "access_type": ""}]}

{"filename": "exceptions.py", "name": "DataDiscrepancyException", "type": "class", "implement": [], "extend": ["(Exception)"], "method": [{"name": "__init__", "type": "", "parameter": [" explain"]}, {"name": "__init__", "type": "", "parameter": [" message"]}, {"name": "short_msg", "type": "", "parameter": []}, {"name": "__init__", "type": "", "parameter": [" stats"]}], "attributes": [{"name": "explain", "type": "", "access_type": ""}, {"name": "message", "type": "", "access_type": ""}, {"name": "stats", "type": "", "access_type": ""}]}

{"filename": "servicefactory.py", "name": "ConfigParser", "type": "class", "implement": [], "extend": ["(configparser.RawConfigParser)"], "method": [{"name": "get_config", "type": "", "parameter": []}, {"name": "get_logger", "type": "", "parameter": ["component='dalake'"]}, {"name": "get_partners_configs", "type": "", "parameter": []}, {"name": "getdict", "type": "", "parameter": [" section", " key=None", " option_is_dict=False"]}, {"name": "get_by_regex", "type": "", "parameter": [" section_pattern", " option_is_dict=False"]}], "attributes": []}

{"filename": "filter.py", "name": "Filter", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" query: str", " columns: list", " mapped_fields: dict = {}"]}, {"name": "__set", "type": "", "parameter": [" query: str"]}, {"name": "get_query", "type": "", "parameter": []}, {"name": "and_cond", "type": "", "parameter": [" field: str", " operator: str", " value"]}, {"name": "or_cond", "type": "", "parameter": [" field: str", " operator: str", " value"]}, {"name": "and_group", "type": "", "parameter": [" func: Callable"]}, {"name": "or_group", "type": "", "parameter": [" func: Callable"]}, {"name": "apply_dynamic_config_filter", "type": "", "parameter": [" dynamic_filter_config: list", " append_operator='and'"]}, {"name": "__where", "type": "", "parameter": [" operator: str"]}, {"name": "__transform_operator", "type": "", "parameter": [" field: str", " operator: str", " value"]}, {"name": "__eq_operator", "type": "", "parameter": [" field: str", " value"]}, {"name": "__neq_operator", "type": "", "parameter": [" field: str", " value"]}, {"name": "__gt_operator", "type": "", "parameter": [" field: str", " value"]}, {"name": "__gte_operator", "type": "", "parameter": [" field: str", " value"]}, {"name": "__lt_operator", "type": "", "parameter": [" field: str", " value"]}, {"name": "__lte_operator", "type": "", "parameter": [" field: str", " value"]}, {"name": "__like_operator", "type": "", "parameter": [" field: str", " value"]}, {"name": "__nlike_operator", "type": "", "parameter": [" field: str", " value"]}, {"name": "__in_operator", "type": "", "parameter": [" field: str", " value"]}, {"name": "__nin_operator", "type": "", "parameter": [" field: str", " value"]}, {"name": "__validated_field", "type": "", "parameter": [" field"]}, {"name": "__validated_operator", "type": "", "parameter": [" operator: str"]}, {"name": "__validated_value", "type": "", "parameter": [" operator: str", " value"]}, {"name": "__validated_filter", "type": "", "parameter": [" field: str", " operator: str", " value"]}, {"name": "__validated_list", "type": "", "parameter": [" value: list"]}, {"name": "__escape_presto", "type": "", "parameter": [" val: str"]}, {"name": "__escape_list", "type": "", "parameter": [" value: list"]}, {"name": "__escape_str_or_int", "type": "", "parameter": [" value"]}, {"name": "__normailize_field_name", "type": "", "parameter": [" field: str"]}], "attributes": [{"name": "__set", "type": "", "access_type": ""}, {"name": "columns", "type": "", "access_type": ""}, {"name": "mapped_fields", "type": "", "access_type": ""}, {"name": "query", "type": "", "access_type": ""}]}

{"filename": "services.py", "name": "AthenaDataSource", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["s3_client: S3Factory", "athena_client: Boto3Factory.athena_instance", "logger"]}, {"name": "get_query_info", "type": "", "parameter": [" execution_id: str"]}, {"name": "get_single_query_result", "type": "", "parameter": ["db: str", "sql: str", "max_retry: int", "delay_time: int", "is_get_result=True"]}, {"name": "batch_poll_query_status", "type": "", "parameter": [" execution_ids: list", " delay_time: int"]}, {"name": "batch_get_query_status", "type": "", "parameter": [" execution_ids: list"]}, {"name": "query", "type": "", "parameter": [" db: str", " sql: str", " max_retry: int", " delay_time = 1"]}, {"name": "copy_result", "type": "", "parameter": [" execution_id: str", " dest: str"]}, {"name": "get_table", "type": "", "parameter": [" database_name: str", " table_name: str"]}, {"name": "__get_results", "type": "", "parameter": [" execution_id: str"]}], "attributes": [{"name": "s3_client", "type": "", "access_type": ""}, {"name": "athena_client", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "FAILED_QUERY_ERROR_MESSAGE", "type": "", "access_type": ""}, {"name": "EXCEED_MAX_RETRY_ERROR_MESSAGE", "type": "", "access_type": ""}, {"name": "CANCELED_QUERY_ERROR_MESSAGE", "type": "", "access_type": ""}, {"name": "UNKNOWN_ERROR_MESSAGE", "type": "", "access_type": ""}, {"name": "TABLE_NOT_FOUND_ERROR_MESSAGE", "type": "", "access_type": ""}]}

{"filename": "services.py", "name": "BigQueryDataSources", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "client", "type": "", "parameter": []}, {"name": "__init__", "type": "", "parameter": [" bigquery_client"]}, {"name": "query", "type": "", "parameter": [" query"]}], "attributes": [{"name": "bigquery_client", "type": "", "access_type": ""}]}

{"filename": "services.py", "name": "WaitForPageLoadBehavior", "type": "class", "implement": [], "extend": ["(object)"], "method": [{"name": "__init__", "type": "", "parameter": [" browser"]}, {"name": "__enter__", "type": "", "parameter": []}, {"name": "page_has_loaded", "type": "", "parameter": []}, {"name": "wait_for", "type": "", "parameter": [" condition_function"]}, {"name": "__exit__", "type": "", "parameter": [" *_"]}, {"name": "setup_driver", "type": "", "parameter": ["logger"]}, {"name": "close_driver", "type": "", "parameter": ["driver"]}, {"name": "kill_driver", "type": "", "parameter": ["pid", " logger"]}, {"name": "wait_for_element_load", "type": "", "parameter": ["driver", " element_identifier"]}, {"name": "download", "type": "", "parameter": ["filename", " logger", " cleanup=True", " remove_bom=False", " num_first_line=0", " num_end_line=0"]}, {"name": "move_to_no_bom_file", "type": "", "parameter": ["filename", " num_first_line", " num_end_line"]}, {"name": "get_captcha_text", "type": "", "parameter": ["driver", "logger", "screenshot_filename='image_chinesean_screenshot.png'", "captcha_filename='image_chinesean_captcha.png'"]}], "attributes": [{"name": "browser", "type": "", "access_type": ""}, {"name": "old_page", "type": "", "access_type": ""}, {"name": "wait_for", "type": "", "access_type": ""}]}

{"filename": "services.py", "name": "CatalogExtractor", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "client", "type": "", "parameter": []}, {"name": "__init__", "type": "", "parameter": [" catalog_client: AbstractGenerator", " logger"]}, {"name": "extract", "type": "", "parameter": [" aggregation: Aggregate"]}, {"name": "job", "type": "", "parameter": [" aggregation: Aggregate"]}], "attributes": [{"name": "catalog_client", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "services.py", "name": "ESDataSources", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" index", " doc_type", " limit_size=1000", " timeout=3000000", " chunk_size=15000", " es_kwargs={}"]}, {"name": "query", "type": "", "parameter": [" query_str", " **kwargs"]}], "attributes": [{"name": "index", "type": "", "access_type": ""}, {"name": "doc_type", "type": "", "access_type": ""}, {"name": "limit", "type": "", "access_type": ""}, {"name": "timeout", "type": "", "access_type": ""}, {"name": "iterator_chunk_size", "type": "", "access_type": ""}, {"name": "es", "type": "", "access_type": ""}]}

{"filename": "models.py", "name": "GAParams", "type": "class", "implement": [], "extend": [], "method": [], "attributes": []}

{"filename": "services.py", "name": "GAExtractor", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "client", "type": "", "parameter": []}, {"name": "__init__", "type": "", "parameter": [" ga_client", " logger"]}, {"name": "extract", "type": "", "parameter": [" ga_params: GAParams"]}, {"name": "job", "type": "", "parameter": [" ga_params: GAParams"]}, {"name": "make_request_with_exponential_backoff", "type": "", "parameter": [" func", " args"]}], "attributes": [{"name": "ga_client", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "log_data", "type": "", "access_type": ""}, {"name": "job", "type": "", "access_type": ""}]}

{"filename": "services.py", "name": "GKPExtractor", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "client", "type": "", "parameter": []}, {"name": "__init__", "type": "", "parameter": [" gkp_client", " logger"]}, {"name": "extract", "type": "", "parameter": [" selector"]}, {"name": "job", "type": "", "parameter": [" selector"]}, {"name": "generate_selector", "type": "", "parameter": ["keywords", " cc", " r_type", " r_attribute_type", " start_index=str(0"]}, {"name": "makeRequestWithBackoff", "type": "", "parameter": [" func", " args"]}], "attributes": [{"name": "gkp_client", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "services.py", "name": "GraphQL", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "client", "type": "", "parameter": ["endpoint: str", " headers: list"]}], "attributes": []}

{"filename": "services.py", "name": "GSCExtractor", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "client", "type": "", "parameter": []}, {"name": "__init__", "type": "", "parameter": [" gsc_client", " logger"]}, {"name": "extract", "type": "", "parameter": [" property_uri", " params"]}, {"name": "job", "type": "", "parameter": [" args"]}, {"name": "make_request_with_exponential_backoff", "type": "", "parameter": [" func", " args"]}], "attributes": [{"name": "gsc_client", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "job", "type": "", "access_type": ""}]}

{"filename": "services.py", "name": "ExchangeRates", "type": "class", "implement": [], "extend": ["()"], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "__load", "type": "", "parameter": []}, {"name": "__save", "type": "", "parameter": []}, {"name": "get_exchange_rates", "type": "", "parameter": [" date"]}, {"name": "get_invoice_date", "type": "", "parameter": ["date", " affiliate"]}, {"name": "convert", "type": "", "parameter": ["value", " transaction_date", " old_currency", " new_currency", " affiliate"]}], "attributes": [{"name": "__load", "type": "", "access_type": ""}, {"name": "exchangeRates", "type": "", "access_type": ""}, {"name": "__save", "type": "", "access_type": ""}]}

{"filename": "services.py", "name": "RDSDataSource", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" original_exception"]}, {"name": "__init__", "type": "", "parameter": ["logger", "connection_config: dict = {}"]}, {"name": "connect", "type": "", "parameter": []}, {"name": "close", "type": "", "parameter": []}, {"name": "execute_query", "type": "", "parameter": [" sql"]}], "attributes": [{"name": "original_exception", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "connection", "type": "", "access_type": ""}, {"name": "database", "type": "", "access_type": ""}, {"name": "host", "type": "", "access_type": ""}, {"name": "user", "type": "", "access_type": ""}, {"name": "password", "type": "", "access_type": ""}, {"name": "port", "type": "", "access_type": ""}, {"name": "close", "type": "", "access_type": ""}]}

{"filename": "s3keyword.py", "name": "S3KeywordSource", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" s3_client", " folder_path"]}, {"name": "load_csv_file", "type": "", "parameter": [" file_name: str"]}, {"name": "get_keyword", "type": "", "parameter": []}, {"name": "cleanup", "type": "", "parameter": []}], "attributes": [{"name": "s3_client", "type": "", "access_type": ""}, {"name": "folder_path", "type": "", "access_type": ""}, {"name": "list_file", "type": "", "access_type": ""}]}

{"filename": "services.py", "name": "SERankingDataSource", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" logger"]}, {"name": "request", "type": "", "parameter": [" url: str"]}, {"name": "get_sites", "type": "", "parameter": []}, {"name": "get_site_by_id", "type": "", "parameter": [" site_id: int"]}, {"name": "get_search_engines", "type": "", "parameter": []}, {"name": "get_site_data", "type": "", "parameter": [" site_id", " start_date", " end_date", " top_keywords"]}], "attributes": [{"name": "logger", "type": "", "access_type": ""}]}

{"filename": "dynamic_filter_interpreter.py", "name": "DynamicFilterInterpreter", "type": "class", "implement": [], "extend": [], "method": [{"name": "apply_dynamic_filter", "type": "", "parameter": ["filter", " config: list", " append_operator='and'"]}, {"name": "__init__", "type": "", "parameter": [" filter", " parser: DynamicFilterParser"]}, {"name": "apply", "type": "", "parameter": [" append_operator = 'and'"]}, {"name": "visit", "type": "", "parameter": [" node: ASTNode", " operator: str"]}, {"name": "visit_NotFound", "type": "", "parameter": [" node: ASTNode", " operator: str"]}, {"name": "visit_ExpressionOperatorNode", "type": "", "parameter": [" node: ExpressionOperatorNode", " operator: str"]}, {"name": "visit_AndOperatorNode", "type": "", "parameter": [" node: AndOperatorNode", " operator: str"]}, {"name": "visit_AndGroupOperatorNode", "type": "", "parameter": [" node: AndGroupOperatorNode", " operator: str"]}, {"name": "and_group", "type": "", "parameter": ["filter"]}, {"name": "visit_OrOperatorNode", "type": "", "parameter": [" node: OrOperatorNode", " operator: str"]}, {"name": "visit_OrGroupOperatorNode", "type": "", "parameter": [" node: OrGroupOperatorNode", " operator: str"]}, {"name": "or_group", "type": "", "parameter": ["filter"]}], "attributes": [{"name": "filter", "type": "", "access_type": ""}, {"name": "parser", "type": "", "access_type": ""}, {"name": "visit", "type": "", "access_type": ""}]}

{"filename": "dynamic_filter_lexer.py", "name": "ArrayDynamicFilterLexer", "type": "class", "implement": [], "extend": ["(DynamicFilterLexer)"], "method": [{"name": "__next__", "type": "", "parameter": []}, {"name": "get_tokens", "type": "", "parameter": []}, {"name": "get_next_token", "type": "", "parameter": []}, {"name": "__init__", "type": "", "parameter": [" tokens: List[Token]"]}, {"name": "get_next_token", "type": "", "parameter": []}, {"name": "__init__", "type": "", "parameter": [" config: list", " support_operators: list"]}, {"name": "get_next_token", "type": "", "parameter": []}, {"name": "__extract_tokens", "type": "", "parameter": [" config_list"]}, {"name": "__add_expression_operator", "type": "", "parameter": [" token: list"]}, {"name": "__add_binary_operator", "type": "", "parameter": [" operator: str"]}, {"name": "__add_paren_operator", "type": "", "parameter": [" operator: str"]}, {"name": "__is_expression_operator", "type": "", "parameter": [" element"]}, {"name": "__get_next_item", "type": "", "parameter": [" lst: Sequence[T]"]}], "attributes": [{"name": "tokens", "type": "", "access_type": ""}, {"name": "support_operators", "type": "", "access_type": ""}, {"name": "__extract_tokens", "type": "", "access_type": ""}, {"name": "current_token", "type": "", "access_type": ""}, {"name": "should_add_binary_op", "type": "", "access_type": ""}, {"name": "__add_expression_operator", "type": "", "access_type": ""}, {"name": "__add_paren_operator", "type": "", "access_type": ""}, {"name": "__add_binary_operator", "type": "", "access_type": ""}]}

{"filename": "dynamic_filter_parser.py", "name": "DynamicFilterParser", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" lexer: DynamicFilterLexer"]}, {"name": "parse", "type": "", "parameter": []}, {"name": "__error", "type": "", "parameter": []}, {"name": "__pop_token", "type": "", "parameter": [" token_type: TokenType"]}, {"name": "__expression_operator", "type": "", "parameter": []}, {"name": "__binary_operator", "type": "", "parameter": [" is_group_operator=False"]}, {"name": "__get_operation_node", "type": "", "parameter": [" token", " is_group_operator: bool"]}], "attributes": [{"name": "lexer", "type": "", "access_type": ""}, {"name": "current_token", "type": "", "access_type": ""}, {"name": "__error", "type": "", "access_type": ""}, {"name": "__pop_token", "type": "", "access_type": ""}]}

{"filename": "product_schema.py", "name": "ProductSchema", "type": "class", "implement": [], "extend": [], "method": [{"name": "get_schema", "type": "", "parameter": []}, {"name": "__schema", "type": "", "parameter": []}], "attributes": []}

{"filename": "__init__.py", "name": "NodeNotFoundError", "type": "class", "implement": [], "extend": ["(Exception)"], "method": [], "attributes": []}

{"filename": "ast.py", "name": "ASTNode", "type": "class", "implement": [], "extend": ["(object)"], "method": [], "attributes": []}

{"filename": "binary_operators.py", "name": "OrGroupOperatorNode", "type": "class", "implement": [], "extend": ["(BinaryOperatorNode)"], "method": [{"name": "__init__", "type": "", "parameter": [" left", " op", " right"]}, {"name": "__set_parent_node", "type": "", "parameter": [" child_node"]}, {"name": "__eq__", "type": "", "parameter": [" value"]}, {"name": "__init__", "type": "", "parameter": [" left", " right"]}, {"name": "__eq__", "type": "", "parameter": [" value"]}, {"name": "__init__", "type": "", "parameter": [" left", " right"]}, {"name": "__eq__", "type": "", "parameter": [" value"]}, {"name": "__init__", "type": "", "parameter": [" left", " right"]}, {"name": "__eq__", "type": "", "parameter": [" value"]}, {"name": "__init__", "type": "", "parameter": [" left", " right"]}, {"name": "__eq__", "type": "", "parameter": [" value"]}], "attributes": [{"name": "parent_node", "type": "", "access_type": ""}, {"name": "left", "type": "", "access_type": ""}, {"name": "token", "type": "", "access_type": ""}, {"name": "op", "type": "", "access_type": ""}, {"name": "right", "type": "", "access_type": ""}]}

{"filename": "expression_operators.py", "name": "ExpressionOperatorNode", "type": "class", "implement": [], "extend": ["(ASTNode)"], "method": [{"name": "__init__", "type": "", "parameter": [" field: Token", " operator: Token", " value: Token"]}, {"name": "__eq__", "type": "", "parameter": [" value"]}], "attributes": [{"name": "parent_node", "type": "", "access_type": ""}, {"name": "field", "type": "", "access_type": ""}, {"name": "operator", "type": "", "access_type": ""}, {"name": "value", "type": "", "access_type": ""}]}

{"filename": "token.py", "name": "Token", "type": "class", "implement": [], "extend": ["(object)"], "method": [{"name": "__init__", "type": "", "parameter": [" type: TokenType", " value"]}, {"name": "__str__", "type": "", "parameter": []}, {"name": "__repr__", "type": "", "parameter": []}, {"name": "__eq__", "type": "", "parameter": [" value"]}], "attributes": [{"name": "type", "type": "", "access_type": ""}, {"name": "value", "type": "", "access_type": ""}]}

{"filename": "log_interface.py", "name": "LogDataInterface", "type": "class", "implement": [], "extend": ["(object", " metaclass=ABCMeta)"], "method": [{"name": "get_log_info", "type": "", "parameter": [" data: pandas.DataFrame", " log_ids: list"]}], "attributes": []}

{"filename": "log_services.py", "name": "LogDataService", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" index=None", " limit=None"]}, {"name": "__search", "type": "", "parameter": [" query: dict", " **kwargs"]}, {"name": "get_data", "type": "", "parameter": [" log_ids: list"]}], "attributes": [{"name": "es", "type": "", "access_type": ""}, {"name": "index", "type": "", "access_type": ""}, {"name": "limit", "type": "", "access_type": ""}]}

{"filename": "sync_log_service.py", "name": "SyncLogService", "type": "class", "implement": [], "extend": ["(LogDataInterface)"], "method": [{"name": "__init__", "type": "", "parameter": [" log_es: LogDataService", " logger: Logger"]}, {"name": "get_log_info", "type": "", "parameter": [" data: pd.DataFrame", " log_ids: list"]}, {"name": "__process_data", "type": "", "parameter": [" data: list"]}], "attributes": [{"name": "log_es", "type": "", "access_type": ""}]}

{"filename": "trans_log_service.py", "name": "TransactionsLogService", "type": "class", "implement": [], "extend": ["(LogDataInterface)"], "method": [{"name": "__init__", "type": "", "parameter": [" log_es: LogDataService", " logger: Logger"]}, {"name": "get_log_info", "type": "", "parameter": [" data: pd.DataFrame", " log_ids: list"]}, {"name": "__process_data", "type": "", "parameter": [" data"]}, {"name": "__dedupe_log_data", "type": "", "parameter": [" log_data", " trans_data"]}], "attributes": [{"name": "log_es", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "base.py", "name": "LazopClient", "type": "class", "implement": [], "extend": ["(object)"], "method": [{"name": "sign", "type": "", "parameter": ["secret", "api", " parameters"]}, {"name": "mixStr", "type": "", "parameter": ["pstr"]}, {"name": "logApiError", "type": "", "parameter": ["appkey", " sdkVersion", " requestUrl", " code", " message"]}, {"name": "__init__", "type": "", "parameter": ["api_pame", "http_method = 'POST'"]}, {"name": "add_api_param", "type": "", "parameter": ["key", "value"]}, {"name": "add_file_param", "type": "", "parameter": ["key", "value"]}, {"name": "__init__", "type": "", "parameter": []}, {"name": "__str__", "type": "", "parameter": [" *args", " **kwargs"]}, {"name": "__init__", "type": "", "parameter": [" server_url", "app_key", "app_secret"]}, {"name": "execute", "type": "", "parameter": [" request", "access_token = None"]}], "attributes": [{"name": "_api_params", "type": "", "access_type": ""}, {"name": "_file_params", "type": "", "access_type": ""}, {"name": "_api_pame", "type": "", "access_type": ""}, {"name": "_http_method", "type": "", "access_type": ""}, {"name": "type", "type": "", "access_type": ""}, {"name": "code", "type": "", "access_type": ""}, {"name": "message", "type": "", "access_type": ""}, {"name": "request_id", "type": "", "access_type": ""}, {"name": "body", "type": "", "access_type": ""}, {"name": "_server_url", "type": "", "access_type": ""}, {"name": "_app_key", "type": "", "access_type": ""}, {"name": "_app_secret", "type": "", "access_type": ""}]}

{"filename": "create_keyspace.py", "name": "CreateKeyspace", "type": "class", "implement": [], "extend": [], "method": [{"name": "sql", "type": "", "parameter": []}, {"name": "run", "type": "", "parameter": []}], "attributes": []}

{"filename": "main.py", "name": "Main", "type": "class", "implement": [], "extend": [], "method": [{"name": "run", "type": "", "parameter": []}], "attributes": []}

{"filename": "trending_plp_table.py", "name": "TrendingPlpTable", "type": "class", "implement": [], "extend": ["(TableSchemaInterface)"], "method": [{"name": "sql", "type": "", "parameter": []}, {"name": "create", "type": "", "parameter": []}], "attributes": []}

{"filename": "trending_product_table.py", "name": "TrendingProductTable", "type": "class", "implement": [], "extend": ["(TableSchemaInterface)"], "method": [{"name": "sql", "type": "", "parameter": []}, {"name": "create", "type": "", "parameter": []}], "attributes": []}

{"filename": "brand.py", "name": "Brand", "type": "class", "implement": [], "extend": ["(CatalogMainFlow)"], "method": [{"name": "process", "type": "", "parameter": [" df"]}], "attributes": []}

{"filename": "category.py", "name": "Category", "type": "class", "implement": [], "extend": ["(CatalogMainFlow)"], "method": [{"name": "process", "type": "", "parameter": [" df"]}], "attributes": []}

{"filename": "comparable.py", "name": "Comparable", "type": "class", "implement": [], "extend": ["(CatalogMainFlow)"], "method": [{"name": "prepare_aggregation", "type": "", "parameter": []}, {"name": "process", "type": "", "parameter": [" df"]}], "attributes": []}

{"filename": "filtered.py", "name": "Filtered", "type": "class", "implement": [], "extend": ["(CatalogMainFlow)"], "method": [{"name": "process", "type": "", "parameter": [" df"]}], "attributes": []}

{"filename": "main.py", "name": "CatalogMainFlow", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" catalog_extractor: CatalogExtractor", " data_store: DataStore", "logger", " cc: str", " date: str", " report_name: str", " schedule: str", " dry_run: bool"]}, {"name": "start", "type": "", "parameter": []}, {"name": "prepare_aggregation", "type": "", "parameter": []}, {"name": "execute", "type": "", "parameter": [" aggregation: Aggregate"]}, {"name": "process", "type": "", "parameter": [" df"]}, {"name": "store", "type": "", "parameter": [" output: pandas.DataFrame"]}], "attributes": [{"name": "catalog_extractor", "type": "", "access_type": ""}, {"name": "data_store", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "schedule", "type": "", "access_type": ""}, {"name": "dry_run", "type": "", "access_type": ""}, {"name": "report_name", "type": "", "access_type": ""}, {"name": "table_name", "type": "", "access_type": ""}, {"name": "headers", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "config", "type": "", "access_type": ""}, {"name": "store", "type": "", "access_type": ""}]}

{"filename": "store.py", "name": "Store", "type": "class", "implement": [], "extend": ["(CatalogMainFlow)"], "method": [{"name": "process", "type": "", "parameter": [" df"]}], "attributes": []}

{"filename": "content_all.py", "name": "ContentAll", "type": "class", "implement": [], "extend": ["(MainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["es_data_source: ESDataSources", "data_store: S3Storage", "cc: str", "date: str", "schedule: str", "dry_run: bool", "service_name: str"]}, {"name": "calculate_stats", "type": "", "parameter": [" data"]}], "attributes": []}

{"filename": "content_links.py", "name": "ContentLinks", "type": "class", "implement": [], "extend": ["(MainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["es_data_source: ESDataSources", "data_store: S3DataStore", "cc: str", "date: str", "schedule: str", "dry_run: bool", "service_name: str"]}, {"name": "calculate_stats", "type": "", "parameter": [" data"]}], "attributes": []}

{"filename": "main.py", "name": "MainFlow", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["es_data_source: ESDataSources", "datastore: DataStore", "cc: str", "date: str", "schedule: str", "dry_run: bool", "service_name: str"]}, {"name": "get_query", "type": "", "parameter": []}, {"name": "start", "type": "", "parameter": []}, {"name": "calculate_stats", "type": "", "parameter": [" data"]}, {"name": "process", "type": "", "parameter": [" df"]}, {"name": "store", "type": "", "parameter": [" output: pandas.DataFrame"]}], "attributes": [{"name": "es_data_source", "type": "", "access_type": ""}, {"name": "datastore", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "schedule", "type": "", "access_type": ""}, {"name": "dry_run", "type": "", "access_type": ""}, {"name": "service_name", "type": "", "access_type": ""}]}

{"filename": "coupon_all.py", "name": "CouponAll", "type": "class", "implement": [], "extend": ["(MainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["es_data_source: ESDataSources", "rds_data_source: RDSDataSource", "data_store: S3Storage", "cc: str", "date: str", "schedule: str", "dry_run: bool", "service_name: str", "logger: Logger"]}, {"name": "calculate_stats", "type": "", "parameter": [" data"]}, {"name": "build_tracking_link", "type": "", "parameter": [" data"]}, {"name": "map_rds_to_es", "type": "", "parameter": [" rds"]}], "attributes": [{"name": "logger", "type": "", "access_type": ""}]}

{"filename": "main.py", "name": "MainFlow", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["es_data_source: ESDataSources", "rds_data_source: RDSDataSource", "datastore: DataStore", "cc: str", "date: str", "schedule: str", "dry_run: bool", "service_name: str", "logger: Logger"]}, {"name": "get_es_query", "type": "", "parameter": []}, {"name": "get_rds_query", "type": "", "parameter": []}, {"name": "start", "type": "", "parameter": []}, {"name": "calculate_stats", "type": "", "parameter": [" data"]}, {"name": "process", "type": "", "parameter": [" df"]}, {"name": "store", "type": "", "parameter": [" output: pandas.DataFrame"]}], "attributes": [{"name": "es_data_source", "type": "", "access_type": ""}, {"name": "rds_data_source", "type": "", "access_type": ""}, {"name": "datastore", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "schedule", "type": "", "access_type": ""}, {"name": "dry_run", "type": "", "access_type": ""}, {"name": "service_name", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "main.py", "name": "CreateGlueTableMainFlow", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["glue_client", "crawler_name: str", "bucket_location: str", "table_prefix: str", "check_crawler_status_max_try_attempt: int", "waiting_crawler_sleep_duration: int", "database_name: str", "table_retention: int", "snapshot_table_retention: int", "backup_date: int", "logger"]}, {"name": "start", "type": "", "parameter": []}, {"name": "glue_update_crawler", "type": "", "parameter": [" crawler_name: str", " bucket_location: str", " table_prefix: str"]}, {"name": "glue_start_crawler", "type": "", "parameter": [" crawler_name: str"]}, {"name": "glue_wait_for_crawler_finish", "type": "", "parameter": [" crawler_name: str", " try_attempts: int", " sleep_duration: int"]}, {"name": "check_crawler_status", "type": "", "parameter": [" crawler_name"]}, {"name": "__drop_expired_tables", "type": "", "parameter": []}, {"name": "__get_expired_tables", "type": "", "parameter": []}], "attributes": [{"name": "glue_client", "type": "", "access_type": ""}, {"name": "crawler_name", "type": "", "access_type": ""}, {"name": "bucket_location", "type": "", "access_type": ""}, {"name": "table_prefix", "type": "", "access_type": ""}, {"name": "check_crawler_status_max_try_attempt", "type": "", "access_type": ""}, {"name": "waiting_crawler_sleep_duration", "type": "", "access_type": ""}, {"name": "database_name", "type": "", "access_type": ""}, {"name": "table_retention", "type": "", "access_type": ""}, {"name": "snapshot_table_retention", "type": "", "access_type": ""}, {"name": "backup_date", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "glue_update_crawler", "type": "", "access_type": ""}, {"name": "glue_start_crawler", "type": "", "access_type": ""}, {"name": "glue_wait_for_crawler_finish", "type": "", "access_type": ""}, {"name": "__drop_expired_tables", "type": "", "access_type": ""}]}

{"filename": "catalog.py", "name": "Catalog", "type": "class", "implement": [], "extend": ["(Dump)"], "method": [{"name": "__init__", "type": "", "parameter": ["es_data_source: ESDataSources", "num_slice: int", "slice_no: int", "scroll_size: int", "scroll_duration: str", "root_directory: str", "min_chunk_size: int"]}, {"name": "get_query", "type": "", "parameter": [" slice_no: int"]}, {"name": "prepare_data", "type": "", "parameter": [" data: List[simdjson.Object]"]}, {"name": "flatten_variants", "type": "", "parameter": [" data: dict", " variants: List[dict]"]}, {"name": "store", "type": "", "parameter": [" is_force=False"]}, {"name": "__enrich_log_info", "type": "", "parameter": [" merchant: str", " data_size: int"]}, {"name": "__store_merchant", "type": "", "parameter": [" merchant: str"]}, {"name": "get_selectors", "type": "", "parameter": [" sample_data: List[simdjson.Object]"]}, {"name": "_get_sample_data", "type": "", "parameter": [" sample_data: list"]}], "attributes": [{"name": "merchants", "type": "", "access_type": ""}, {"name": "merchants_counter", "type": "", "access_type": ""}, {"name": "merchant_selector", "type": "", "access_type": ""}, {"name": "variants_selector", "type": "", "access_type": ""}, {"name": "selectors", "type": "", "access_type": ""}, {"name": "schema", "type": "", "access_type": ""}, {"name": "__enrich_log_info", "type": "", "access_type": ""}, {"name": "__store_merchant", "type": "", "access_type": ""}, {"name": "info", "type": "", "access_type": ""}, {"name": "root_directory", "type": "", "access_type": ""}, {"name": "_store", "type": "", "access_type": ""}]}

{"filename": "comparable.py", "name": "Comparable", "type": "class", "implement": [], "extend": ["(Dump)"], "method": [{"name": "__init__", "type": "", "parameter": ["es_data_source: ESDataSources", "num_slice: int", "slice_no: int", "scroll_size: int", "scroll_duration: str", "root_directory: str", "min_chunk_size: int"]}, {"name": "get_query", "type": "", "parameter": [" slice_no: int"]}, {"name": "prepare_data", "type": "", "parameter": [" data: List[simdjson.Object]"]}, {"name": "store", "type": "", "parameter": [" is_force=False"]}, {"name": "__enrich_log_info", "type": "", "parameter": [" data_size: int"]}, {"name": "get_selectors", "type": "", "parameter": [" sample_data: List[simdjson.Object]"]}, {"name": "_get_sample_data", "type": "", "parameter": [" sample_data: list"]}], "attributes": [{"name": "comparable", "type": "", "access_type": ""}, {"name": "current_total", "type": "", "access_type": ""}, {"name": "selectors", "type": "", "access_type": ""}, {"name": "schema", "type": "", "access_type": ""}, {"name": "_store", "type": "", "access_type": ""}, {"name": "__enrich_log_info", "type": "", "access_type": ""}, {"name": "info", "type": "", "access_type": ""}, {"name": "_get_sample_data", "type": "", "access_type": ""}]}

{"filename": "dump.py", "name": "Dump", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["es_data_source: ESDataSources", "num_slice: int", "slice_no: int", "scroll_size: int", "scroll_duration: str", "root_directory: str", "min_chunk_size: int"]}, {"name": "start", "type": "", "parameter": []}, {"name": "_scroll", "type": "", "parameter": []}, {"name": "scanning", "type": "", "parameter": ["queue: Queue", " client: ESDataSources", " query: dict", " **kwargs"]}, {"name": "get_query", "type": "", "parameter": [" slice_no: int"]}, {"name": "prepare_data", "type": "", "parameter": [" data: List[simdjson.Object]"]}, {"name": "store", "type": "", "parameter": [" is_force=False"]}, {"name": "get_info", "type": "", "parameter": []}, {"name": "_store", "type": "", "parameter": [" full_path: str", " df: pd.DataFrame"]}, {"name": "_cast_type", "type": "", "parameter": [" data: Dict[str", " List[Any]]", " schema: Dict[str", " Any]"]}], "attributes": [{"name": "es_data_source", "type": "", "access_type": ""}, {"name": "num_slice", "type": "", "access_type": ""}, {"name": "slice_no", "type": "", "access_type": ""}, {"name": "scroll_size", "type": "", "access_type": ""}, {"name": "scroll_duration", "type": "", "access_type": ""}, {"name": "root_directory", "type": "", "access_type": ""}, {"name": "min_chunk_size", "type": "", "access_type": ""}, {"name": "info", "type": "", "access_type": ""}, {"name": "schema", "type": "", "access_type": ""}, {"name": "prepare_data", "type": "", "access_type": ""}, {"name": "store", "type": "", "access_type": ""}]}

{"filename": "ga_bi_acquisition.py", "name": "GaBiAcquisition", "type": "class", "implement": [], "extend": ["(DWHSyncMainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["df_client: DataFactoryManagementClient", "resource_group_name: str", "data_factory_name: str", "cc: str", "date: str", "logger: Logger"]}], "attributes": []}

{"filename": "ga_bi_conversions.py", "name": "GaBiConversions", "type": "class", "implement": [], "extend": ["(DWHSyncMainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["df_client: DataFactoryManagementClient", "resource_group_name: str", "data_factory_name: str", "cc: str", "date: str", "logger: Logger"]}], "attributes": []}

{"filename": "gsc_device_all.py", "name": "GscDeviceAll", "type": "class", "implement": [], "extend": ["(DWHSyncMainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["df_client: DataFactoryManagementClient", "resource_group_name: str", "data_factory_name: str", "cc: str", "date: str", "logger: Logger"]}], "attributes": []}

{"filename": "main.py", "name": "DWHSyncMainFlow", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["df_client: DataFactoryManagementClient", "resource_group_name: str", "data_factory_name: str", "cc: str", "date: str", "pipeline_name: str", "logger: Logger"]}, {"name": "start", "type": "", "parameter": []}, {"name": "_get_pipeline_run", "type": "", "parameter": [" run_id: str"]}], "attributes": [{"name": "df_client", "type": "", "access_type": ""}, {"name": "resource_group_name", "type": "", "access_type": ""}, {"name": "data_factory_name", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "pipeline_name", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "all.py", "name": "All", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["ga_extractor: GAExtractor", "datastore: DataStore", "cc: str", "start_date: str", "end_date: str", "website: str", "report: str", "logger: Logger"]}, {"name": "start", "type": "", "parameter": []}, {"name": "get_ga_params", "type": "", "parameter": [" website: str", " metrics: dict = None", " dimensions: list = None", " filters: list = None", " sort: str = None", " include_empty_rows: bool = None"]}, {"name": "get_response", "type": "", "parameter": [" ga_params: GAParams", " website: str"]}, {"name": "get_dataframe_from_website", "type": "", "parameter": [" website: str"]}, {"name": "store", "type": "", "parameter": [" output: pandas.DataFrame"]}], "attributes": [{"name": "ga_extractor", "type": "", "access_type": ""}, {"name": "datastore", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "start_date", "type": "", "access_type": ""}, {"name": "end_date", "type": "", "access_type": ""}, {"name": "website", "type": "", "access_type": ""}, {"name": "report", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "query", "type": "", "access_type": ""}, {"name": "store", "type": "", "access_type": ""}]}

{"filename": "ga_bi_acquisition.py", "name": "GaBiAcquisition", "type": "class", "implement": [], "extend": ["(GAMainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": [" *args", " **kwargs"]}, {"name": "process", "type": "", "parameter": [" website", " df"]}], "attributes": [{"name": "logger", "type": "", "access_type": ""}]}

{"filename": "ga_bi_conversions.py", "name": "GaBiConversions", "type": "class", "implement": [], "extend": ["(GAMainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": [" *args", " **kwargs"]}, {"name": "process", "type": "", "parameter": [" website", " df"]}], "attributes": [{"name": "logger", "type": "", "access_type": ""}]}

{"filename": "ga_bi_engagement.py", "name": "GaBiEngagement", "type": "class", "implement": [], "extend": ["(GAMainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["*args", "**kwargs"]}, {"name": "process", "type": "", "parameter": [" website: str", " df: pd.DataFrame"]}, {"name": "get_offer_card_count", "type": "", "parameter": ["row: pd.Series"]}, {"name": "get_dataframe_from_website", "type": "", "parameter": [" website: str"]}, {"name": "request", "type": "", "parameter": [" website: str", " dimensions: list", " metrics: list"]}, {"name": "merge", "type": "", "parameter": [" left: pd.DataFrame", " right: pd.DataFrame", " on_columns: list"]}, {"name": "filling_missing_pageviews", "type": "", "parameter": [" merged_df: pd.DataFrame", " fulldata: pd.DataFrame", " group_keys: list"]}], "attributes": [{"name": "logger", "type": "", "access_type": ""}, {"name": "log_data", "type": "", "access_type": ""}, {"name": "log_request", "type": "", "access_type": ""}]}

{"filename": "main.py", "name": "GAMainFlow", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["query: dict", "dropping_threshold_table: dict", "ga_extractor: GAExtractor", "datastore: DataStore", "elk_source: ES", "cc: str", "date: str", "schedule: str", "dry_run: bool", "logger: Logger", "skip_validation: bool = False", "force: bool = False"]}, {"name": "start", "type": "", "parameter": []}, {"name": "get_dataframe_from_website", "type": "", "parameter": [" website: str"]}, {"name": "log_request", "type": "", "parameter": []}, {"name": "get_response", "type": "", "parameter": [" ga_params: GAParams", " website: str"]}, {"name": "process", "type": "", "parameter": [" website: str", " df: pandas.DataFrame"]}, {"name": "store", "type": "", "parameter": [" output: pandas.DataFrame"]}, {"name": "get_ga_params", "type": "", "parameter": [" website: str", " metrics: dict = None", " dimensions: list = None", " filters: list = None", " sort: str = None", " include_empty_rows: bool = None"]}, {"name": "check_data", "type": "", "parameter": [" data: pandas.DataFrame"]}, {"name": "get_historical_stats", "type": "", "parameter": [" days_ago: int = 1"]}, {"name": "_get_recent_data", "type": "", "parameter": [" days_ago"]}, {"name": "should_store_data", "type": "", "parameter": [" output: pandas.DataFrame"]}, {"name": "get_file_path", "type": "", "parameter": []}], "attributes": [{"name": "ga_extractor", "type": "", "access_type": ""}, {"name": "datastore", "type": "", "access_type": ""}, {"name": "elk_source", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "query", "type": "", "access_type": ""}, {"name": "schedule", "type": "", "access_type": ""}, {"name": "dry_run", "type": "", "access_type": ""}, {"name": "skip_validation", "type": "", "access_type": ""}, {"name": "force", "type": "", "access_type": ""}, {"name": "table_name", "type": "", "access_type": ""}, {"name": "dropping_threshold_table", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "store", "type": "", "access_type": ""}, {"name": "check_data", "type": "", "access_type": ""}, {"name": "log_data", "type": "", "access_type": ""}, {"name": "log_request", "type": "", "access_type": ""}]}

{"filename": "gkp_gsv.py", "name": "GkpGsv", "type": "class", "implement": [], "extend": ["(GKPMainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": [" gkp_extractor: GKPExtractor", " s3_data_store: dataStore", " s3_keyword_source: S3KeywordSource", "logger", " cc: str", " date: str", " schedule: str", " dry_run: bool"]}, {"name": "process", "type": "", "parameter": [" df"]}], "attributes": [{"name": "headers", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}]}

{"filename": "main.py", "name": "GKPMainFlow", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" gkp_extractor: GKPExtractor", " data_store: DataStore", " s3_keyword_source: S3KeywordSource", "logger", " cc: str", " date: str", " schedule: str", " dry_run: bool"]}, {"name": "start", "type": "", "parameter": []}, {"name": "execute", "type": "", "parameter": [" keywords: list"]}, {"name": "process", "type": "", "parameter": [" df"]}, {"name": "store", "type": "", "parameter": [" output: pandas.DataFrame"]}], "attributes": [{"name": "gkp_extractor", "type": "", "access_type": ""}, {"name": "data_store", "type": "", "access_type": ""}, {"name": "s3_keyword_source", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "schedule", "type": "", "access_type": ""}, {"name": "dry_run", "type": "", "access_type": ""}, {"name": "table_name", "type": "", "access_type": ""}, {"name": "headers", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "config", "type": "", "access_type": ""}, {"name": "store", "type": "", "access_type": ""}]}

{"filename": "gsc_all.py", "name": "GscAll", "type": "class", "implement": [], "extend": ["(GSCMainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["gsc_extractor: GSCExtractor", "data_store: DataStore", "elk_source: ES", "cc: str", "date: str", "schedule: str", "dry_run: bool", "logger: Logger", "skip_validation: bool = False", "force: bool = False", "**kwargs"]}, {"name": "process", "type": "", "parameter": [" website", " df"]}], "attributes": [{"name": "QUERY", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "gsc_device_all.py", "name": "GscDeviceAll", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["data_store: DataStore", "cc: str", "date: str", "schedule: str", "dry_run: bool", "logger: Logger", "bigquery_datasource: BigQueryDataSources", "**kwargs"]}, {"name": "start", "type": "", "parameter": []}, {"name": "process", "type": "", "parameter": [" website", " results"]}, {"name": "parse_path", "type": "", "parameter": [" landing_path", " property_uri"]}, {"name": "get_big_query_data", "type": "", "parameter": [" website"]}, {"name": "store", "type": "", "parameter": [" output: pd.DataFrame"]}, {"name": "get_file_path", "type": "", "parameter": []}], "attributes": [{"name": "bigquery", "type": "", "access_type": ""}, {"name": "datastore", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "schedule", "type": "", "access_type": ""}, {"name": "dry_run", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "log_data", "type": "", "access_type": ""}, {"name": "store", "type": "", "access_type": ""}]}

{"filename": "main.py", "name": "GSCMainFlow", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["gsc_extractor: GSCExtractor", "datastore: DataStore", "elk_source: ES", "cc: str", "date: str", "query: dict", "schedule: str", "dry_run: bool", "dropping_threshold_table: dict", "logger: Logger", "skip_validation: bool = False", "force: bool = False"]}, {"name": "start", "type": "", "parameter": []}, {"name": "execute", "type": "", "parameter": [" property_uri: str", " params: dict", " website: str"]}, {"name": "process", "type": "", "parameter": [" website", " df"]}, {"name": "store", "type": "", "parameter": [" output: pandas.DataFrame"]}, {"name": "check_data", "type": "", "parameter": [" data: pandas.DataFrame"]}, {"name": "get_historical_stats", "type": "", "parameter": [" days_ago: int = 1"]}, {"name": "should_store_data", "type": "", "parameter": [" output: pandas.DataFrame"]}, {"name": "get_file_path", "type": "", "parameter": []}], "attributes": [{"name": "gsc_extractor", "type": "", "access_type": ""}, {"name": "datastore", "type": "", "access_type": ""}, {"name": "elk_source", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "query", "type": "", "access_type": ""}, {"name": "schedule", "type": "", "access_type": ""}, {"name": "dry_run", "type": "", "access_type": ""}, {"name": "skip_validation", "type": "", "access_type": ""}, {"name": "force", "type": "", "access_type": ""}, {"name": "table_name", "type": "", "access_type": ""}, {"name": "headers", "type": "", "access_type": ""}, {"name": "property_uri", "type": "", "access_type": ""}, {"name": "dropping_threshold_table", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "log_data", "type": "", "access_type": ""}, {"name": "store", "type": "", "access_type": ""}, {"name": "check_data", "type": "", "access_type": ""}]}

{"filename": "ho_performance.py", "name": "HoPerformance", "type": "class", "implement": [], "extend": ["(HoMainFlow)"], "method": [], "attributes": []}

{"filename": "ho_sync.py", "name": "HoSync", "type": "class", "implement": [], "extend": ["(HoMainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["log_service: LogDataInterface", "datastore: DataStore", "start_date : datetime.time", "end_date: datetime.time", "cc: str", "date: str", "report_type: str", "schedule: str", "logger: Logger", "dry_run: bool", "testing: bool"]}, {"name": "process", "type": "", "parameter": [" data: pandas.DataFrame"]}, {"name": "__sync_and_update_conversions", "type": "", "parameter": [" data: pandas.DataFrame"]}], "attributes": [{"name": "ipricegroup", "type": "", "access_type": ""}, {"name": "report_type", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "ho_transaction.py", "name": "HoTransaction", "type": "class", "implement": [], "extend": ["(HoMainFlow)"], "method": [], "attributes": []}

{"filename": "main.py", "name": "HoMainFlow", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["log_service: LogDataInterface", "datastore: DataStore", "start_date: datetime.time", "end_date: datetime.time", "cc: str", "date: str", "report_type: str", "schedule: str", "logger: Logger", "dry_run: bool", "testing: bool"]}, {"name": "start", "type": "", "parameter": [" data: pandas.DataFrame"]}, {"name": "process", "type": "", "parameter": [" data: pandas.DataFrame"]}, {"name": "store", "type": "", "parameter": [" country: str", " output: pandas.DataFrame"]}, {"name": "__add_dynamic_columns", "type": "", "parameter": [" df"]}, {"name": "__mapping_data_type", "type": "", "parameter": [" df"]}, {"name": "__clean_up", "type": "", "parameter": [" df"]}], "attributes": [{"name": "log_service", "type": "", "access_type": ""}, {"name": "datastore", "type": "", "access_type": ""}, {"name": "start_date", "type": "", "access_type": ""}, {"name": "end_date", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "report_type", "type": "", "access_type": ""}, {"name": "schedule", "type": "", "access_type": ""}, {"name": "dry_run", "type": "", "access_type": ""}, {"name": "testing", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "store", "type": "", "access_type": ""}]}

{"filename": "feed.py", "name": "Feed", "type": "class", "implement": [], "extend": ["(MainFlow)"], "method": [{"name": "start", "type": "", "parameter": []}, {"name": "_generate_merchants_txt", "type": "", "parameter": [" merchants: set"]}, {"name": "__update_latest_txt", "type": "", "parameter": []}], "attributes": [{"name": "__update_latest_txt", "type": "", "access_type": ""}, {"name": "data_store", "type": "", "access_type": ""}, {"name": "feed_output", "type": "", "access_type": ""}]}

{"filename": "feed_retry.py", "name": "FeedRetry", "type": "class", "implement": [], "extend": ["(MainFlow)"], "method": [{"name": "_generate_merchants_txt", "type": "", "parameter": [" merchants: set"]}], "attributes": [{"name": "data_store", "type": "", "access_type": ""}]}

{"filename": "main.py", "name": "MainFlow", "type": "class", "implement": [], "extend": ["(object", " metaclass=ABCMeta)"], "method": [{"name": "__init__", "type": "", "parameter": ["data_source: AthenaDataSource", "data_store: DataStore", "logger: Logger", "query: AbstractQuery", "cc: str", "date: str", "db: str", "partner: str", "max_retry: int", "delay_time: int", "dry_run: bool", "merchants: list", "feed_output: str", "dump_to_latest_folder: bool", "is_merchant_dump_included: bool", "merchant_dump_source_fields: list", "**kwargs"]}, {"name": "init_merchant_from_param", "type": "", "parameter": [" merchant_param"]}, {"name": "start", "type": "", "parameter": []}, {"name": "_generate_merchants_txt", "type": "", "parameter": [" merchants: set"]}, {"name": "__get_merchants", "type": "", "parameter": []}, {"name": "__execute_queries", "type": "", "parameter": [" merchants: set"]}, {"name": "__poll_final_state_of_queries", "type": "", "parameter": []}, {"name": "__retrying", "type": "", "parameter": []}, {"name": "__has_failed_queries", "type": "", "parameter": []}, {"name": "__process_succeeded_results", "type": "", "parameter": []}, {"name": "_get_storage_path", "type": "", "parameter": [" file_name"]}, {"name": "__generate_product_stats", "type": "", "parameter": []}, {"name": "__generate_merchant_feed", "type": "", "parameter": []}], "attributes": [{"name": "data_source", "type": "", "access_type": ""}, {"name": "data_store", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "query", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "db", "type": "", "access_type": ""}, {"name": "partner", "type": "", "access_type": ""}, {"name": "max_retry", "type": "", "access_type": ""}, {"name": "delay_time", "type": "", "access_type": ""}, {"name": "dry_run", "type": "", "access_type": ""}, {"name": "feed_output", "type": "", "access_type": ""}, {"name": "dump_to_latest_folder", "type": "", "access_type": ""}, {"name": "merchants", "type": "", "access_type": ""}, {"name": "s3_retention_tag", "type": "", "access_type": ""}, {"name": "is_merchant_dump_included", "type": "", "access_type": ""}, {"name": "merchant_dump_source_fields", "type": "", "access_type": ""}, {"name": "__execute_queries", "type": "", "access_type": ""}, {"name": "__poll_final_state_of_queries", "type": "", "access_type": ""}, {"name": "__retrying", "type": "", "access_type": ""}, {"name": "__process_succeeded_results", "type": "", "access_type": ""}, {"name": "__generate_product_stats", "type": "", "access_type": ""}, {"name": "__generate_merchant_feed", "type": "", "access_type": ""}, {"name": "_generate_merchants_txt", "type": "", "access_type": ""}]}

{"filename": "ga_lvl0_prediction.py", "name": "GaLvl0Prediction", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["data_store: DataStore", "cc: str", "date: str", "schedule: str", "dry_run: bool", "logger: Logger"]}, {"name": "start", "type": "", "parameter": []}, {"name": "store", "type": "", "parameter": [" output: pandas.DataFrame", " table_name: str"]}, {"name": "get_data", "type": "", "parameter": [" table_name: str"]}, {"name": "get_ga_table_path", "type": "", "parameter": [" table_name: str"]}], "attributes": [{"name": "datastore", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "schedule", "type": "", "access_type": ""}, {"name": "dry_run", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "predictor", "type": "", "access_type": ""}, {"name": "store", "type": "", "access_type": ""}]}

{"filename": "main.py", "name": "MainFlow", "type": "class", "implement": [], "extend": ["(ABC)"], "method": [{"name": "__init__", "type": "", "parameter": ["rds_data_source: RDSDataSource", "datastore: DataStore", "cc: str", "date: str", "schedule: str", "dry_run: bool", "service_name: str", "logger: Logger"]}, {"name": "start", "type": "", "parameter": []}, {"name": "get_query", "type": "", "parameter": []}, {"name": "_store", "type": "", "parameter": [" output: pandas.DataFrame"]}, {"name": "get_file_path", "type": "", "parameter": []}, {"name": "_process", "type": "", "parameter": [" df: pandas.DataFrame"]}], "attributes": [{"name": "rds_data_source", "type": "", "access_type": ""}, {"name": "datastore", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "schedule", "type": "", "access_type": ""}, {"name": "dry_run", "type": "", "access_type": ""}, {"name": "service_name", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "price_watch.py", "name": "PriceWatch", "type": "class", "implement": [], "extend": ["(MainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["rds_data_source: RDSDataSource", "data_store: S3Storage", "cc: str", "date: str", "schedule: str", "dry_run: bool", "service_name: str", "logger: Logger"]}, {"name": "get_query", "type": "", "parameter": []}], "attributes": []}

{"filename": "users.py", "name": "Users", "type": "class", "implement": [], "extend": ["(MainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["rds_data_source: RDSDataSource", "data_store: S3Storage", "cc: str", "date: str", "schedule: str", "dry_run: bool", "service_name: str", "logger: Logger"]}, {"name": "get_query", "type": "", "parameter": []}], "attributes": []}

{"filename": "catalog.py", "name": "Catalog", "type": "class", "implement": [], "extend": ["(Main)"], "method": [{"name": "__init__", "type": "", "parameter": ["s3_client: S3FileSystem", "datastore: DataStore", "chunk_size: int", "limit_process: int", "logger"]}, {"name": "get_parameters", "type": "", "parameter": []}, {"name": "__get_s3_merchant_parquet_directory", "type": "", "parameter": [" cc: str", " merchant: str"]}, {"name": "sort", "type": "", "parameter": [" data: pd.DataFrame"]}], "attributes": [{"name": "config", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}]}

{"filename": "comparable.py", "name": "Comparable", "type": "class", "implement": [], "extend": ["(Main)"], "method": [{"name": "__init__", "type": "", "parameter": ["s3_client: S3FileSystem", "datastore: DataStore", "chunk_size: int", "limit_process: int", "logger"]}, {"name": "get_parameters", "type": "", "parameter": []}, {"name": "__get_s3_parquet_directory", "type": "", "parameter": [" cc: str"]}], "attributes": [{"name": "config", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}]}

{"filename": "main.py", "name": "Main", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["s3_client: S3FileSystem", "datastore: DataStore", "chunk_size: int", "limit_process: int", "folder_name: str", "bucket_raw_backup: str", "logger"]}, {"name": "start", "type": "", "parameter": []}, {"name": "__clear_uploaded_data", "type": "", "parameter": [" parameter_list"]}, {"name": "__get_average_file_per_merchant", "type": "", "parameter": [" parameter_list"]}, {"name": "__parameter_preprocessing", "type": "", "parameter": [" parameter_list"]}, {"name": "__enrich_log_info", "type": "", "parameter": [" log_info"]}, {"name": "get_info", "type": "", "parameter": []}, {"name": "process", "type": "", "parameter": [" bucket_path: str", " file_paths: list", " merchant: str", " cc: str"]}, {"name": "sort", "type": "", "parameter": [" data: pd.DataFrame"]}, {"name": "__upload", "type": "", "parameter": [" data", " bucket_path"]}, {"name": "get_parameters", "type": "", "parameter": []}, {"name": "__get_parquet_files", "type": "", "parameter": [" bucket_path_list: list"]}, {"name": "__apply_tags_for_parquets", "type": "", "parameter": [" bucket_path_list: list"]}], "attributes": [{"name": "s3_client", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "chunk_size", "type": "", "access_type": ""}, {"name": "limit_process", "type": "", "access_type": ""}, {"name": "config", "type": "", "access_type": ""}, {"name": "datastore", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "folder_name", "type": "", "access_type": ""}, {"name": "bucket_raw_backup", "type": "", "access_type": ""}, {"name": "local_tmp_directory", "type": "", "access_type": ""}, {"name": "total_record", "type": "", "access_type": ""}, {"name": "merchant_stats", "type": "", "access_type": ""}, {"name": "__clear_uploaded_data", "type": "", "access_type": ""}, {"name": "__enrich_log_info", "type": "", "access_type": ""}, {"name": "__apply_tags_for_parquets", "type": "", "access_type": ""}, {"name": "sort", "type": "", "access_type": ""}, {"name": "__upload", "type": "", "access_type": ""}]}

{"filename": "main.py", "name": "MainFlow", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["es_data_source: ESDataSources", "datastore: DataStore", "cc: str", "date: str", "schedule: str", "dry_run: bool", "service_name: str"]}, {"name": "get_query", "type": "", "parameter": []}, {"name": "start", "type": "", "parameter": []}, {"name": "calculate_stats", "type": "", "parameter": [" data"]}, {"name": "process", "type": "", "parameter": [" df"]}, {"name": "store", "type": "", "parameter": [" output: pandas.DataFrame"]}], "attributes": [{"name": "es_data_source", "type": "", "access_type": ""}, {"name": "datastore", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "schedule", "type": "", "access_type": ""}, {"name": "dry_run", "type": "", "access_type": ""}, {"name": "service_name", "type": "", "access_type": ""}]}

{"filename": "rex_all.py", "name": "RexAll", "type": "class", "implement": [], "extend": ["(MainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["es_data_source: ESDataSources", "data_store: S3Storage", "cc: str", "date: str", "schedule: str", "dry_run: bool", "service_name: str"]}, {"name": "calculate_stats", "type": "", "parameter": [" data"]}], "attributes": []}

{"filename": "main.py", "name": "MainFlow", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" cc: str", " athena_repository: AthenaRepository", "cassandra_repository: CassandraRepository", "logger: Logger"]}, {"name": "process", "type": "", "parameter": []}, {"name": "get_number_of_updated_products", "type": "", "parameter": []}], "attributes": [{"name": "cc", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "athena_repository", "type": "", "access_type": ""}, {"name": "cassandra_repository", "type": "", "access_type": ""}, {"name": "updated_products", "type": "", "access_type": ""}]}

{"filename": "secondhand_selling_products.py", "name": "SecondhandSellingProducts", "type": "class", "implement": [], "extend": ["(MainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["cc: str", "athena_repository: AthenaRepository", "cassandra_repository: CassandraRepository", "logger: Logger"]}, {"name": "process", "type": "", "parameter": []}, {"name": "sanitize_url", "type": "", "parameter": [" url: str"]}], "attributes": [{"name": "cassandra_repository", "type": "", "access_type": ""}, {"name": "updated_products", "type": "", "access_type": ""}]}

{"filename": "selling_products.py", "name": "SellingProducts", "type": "class", "implement": [], "extend": ["(MainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": ["cc: str", "athena_repository: AthenaRepository", "cassandra_repository: CassandraRepository", "logger: Logger"]}, {"name": "process", "type": "", "parameter": []}, {"name": "sanitize_url", "type": "", "parameter": [" url: str"]}], "attributes": [{"name": "cassandra_repository", "type": "", "access_type": ""}, {"name": "updated_products", "type": "", "access_type": ""}]}

{"filename": "trending_products.py", "name": "TrendingProducts", "type": "class", "implement": [], "extend": ["(MainFlow)"], "method": [{"name": "__init__", "type": "", "parameter": [" cc: str", " athena_repository: AthenaRepository", "cassandra_repository: CassandraRepository", " logger: Logger"]}, {"name": "process", "type": "", "parameter": []}, {"name": "sanitize_url", "type": "", "parameter": [" url: str"]}, {"name": "prepare_data", "type": "", "parameter": [" data"]}], "attributes": [{"name": "trending_calculator", "type": "", "access_type": ""}, {"name": "cassandra_repository", "type": "", "access_type": ""}, {"name": "updated_products", "type": "", "access_type": ""}]}

{"filename": "seranking.py", "name": "Seranking", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["data_source", "data_store: DataStore", "cc: str", "date: str", "schedule: str", "dry_run: bool", "service_name: str", "sites: list", "logger: Logger"]}, {"name": "start", "type": "", "parameter": []}, {"name": "store", "type": "", "parameter": [" df: pandas.DataFrame", " date: str"]}, {"name": "extract_kwds", "type": "", "parameter": [" df: pandas.DataFrame", " site: str", " cc: str"]}, {"name": "get_google_ids", "type": "", "parameter": []}, {"name": "create_site_dataframe", "type": "", "parameter": [" sites: list", " google_ids: list"]}], "attributes": [{"name": "data_source", "type": "", "access_type": ""}, {"name": "data_store", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "schedule", "type": "", "access_type": ""}, {"name": "service_name", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "sites", "type": "", "access_type": ""}, {"name": "dry_run", "type": "", "access_type": ""}, {"name": "store", "type": "", "access_type": ""}]}

{"filename": "catalog.py", "name": "Catalog", "type": "class", "implement": [], "extend": ["(Statistics)"], "method": [{"name": "get_flow_name", "type": "", "parameter": []}, {"name": "get_query", "type": "", "parameter": []}], "attributes": []}

{"filename": "comparable.py", "name": "Comparable", "type": "class", "implement": [], "extend": ["(Statistics)"], "method": [{"name": "get_flow_name", "type": "", "parameter": []}, {"name": "get_query", "type": "", "parameter": []}], "attributes": []}

{"filename": "statistics.py", "name": "Statistics", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["cc", "es_data_source: ESDataSources", "datastore: DataStore", "config", "logger"]}, {"name": "start", "type": "", "parameter": []}, {"name": "get_flow_name", "type": "", "parameter": []}, {"name": "get_query", "type": "", "parameter": []}, {"name": "__upload", "type": "", "parameter": [" data"]}], "attributes": [{"name": "es_data_source", "type": "", "access_type": ""}, {"name": "config", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "bucket_path", "type": "", "access_type": ""}, {"name": "get_flow_name", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "datastore", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "__upload", "type": "", "access_type": ""}]}

{"filename": "main.py", "name": "MainFlow", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": [" cc: str", " athena_repository: AthenaRepository", " trending_repository: TrendingPlpRepository", "trending_calculator: TrendingCalculator", " logger: Logger"]}, {"name": "process", "type": "", "parameter": []}, {"name": "sanitize_url", "type": "", "parameter": [" url: str"]}, {"name": "prepare_data", "type": "", "parameter": [" data"]}, {"name": "get_plp_uniquepageviews_for_trending_plp", "type": "", "parameter": [" cc: str", " days: int"]}], "attributes": [{"name": "cc", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "athena_repository", "type": "", "access_type": ""}, {"name": "trending_repository", "type": "", "access_type": ""}, {"name": "trending_calculator", "type": "", "access_type": ""}]}

{"filename": "main.py", "name": "MainFlow", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": ["ga_extractor: GAExtractor", "graphql: GraphQL", "date: str", "logger: Logger"]}, {"name": "process", "type": "", "parameter": []}, {"name": "send_to_graphql", "type": "", "parameter": [" project", " data"]}, {"name": "extract", "type": "", "parameter": [" response"]}, {"name": "get_ga_params", "type": "", "parameter": [" source"]}], "attributes": [{"name": "ga_extractor", "type": "", "access_type": ""}, {"name": "graphql", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "log_data", "type": "", "access_type": ""}, {"name": "send_to_graphql", "type": "", "access_type": ""}]}

{"filename": "athena.py", "name": "Athena", "type": "class", "implement": [], "extend": ["(Verification)"], "method": [{"name": "verify_result", "type": "", "parameter": []}, {"name": "_prepare_data", "type": "", "parameter": []}, {"name": "__get_query", "type": "", "parameter": []}, {"name": "__send_important_email", "type": "", "parameter": [" product_dump_value", " product_raw_value", " product_es_value"]}], "attributes": [{"name": "__send_important_email", "type": "", "access_type": ""}]}

{"filename": "partner.py", "name": "Partner", "type": "class", "implement": [], "extend": ["(Verification)"], "method": [{"name": "__init__", "type": "", "parameter": ["elk_data_source: ES", "date: str", "config", "logger", "s3_client"]}, {"name": "verify_result", "type": "", "parameter": []}, {"name": "_prepare_data", "type": "", "parameter": []}, {"name": "__collect_data", "type": "", "parameter": [" partner_feed: str"]}, {"name": "__get_historical_stats", "type": "", "parameter": [" partner_feed: str"]}, {"name": "__fetch_athena_query_failed_retry", "type": "", "parameter": []}, {"name": "__warning_anomalies", "type": "", "parameter": ["stats: dict", "exceed_threshold_merchants: list"]}, {"name": "__notify", "type": "", "parameter": [" failed_retry_stats: list"]}, {"name": "__attach_body", "type": "", "parameter": [" msg: MIMEMultipart", " body: str"]}, {"name": "__attach_csv_file", "type": "", "parameter": [" msg: MIMEMultipart", " exceed_threshold_merchants: list"]}], "attributes": [{"name": "previous_date", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "s3_client", "type": "", "access_type": ""}, {"name": "bucket_name", "type": "", "access_type": ""}, {"name": "threshold", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "__warning_anomalies", "type": "", "access_type": ""}, {"name": "__notify", "type": "", "access_type": ""}, {"name": "__attach_body", "type": "", "access_type": ""}, {"name": "__attach_csv_file", "type": "", "access_type": ""}]}

{"filename": "verification.py", "name": "Verification", "type": "class", "implement": [], "extend": ["(ABC)"], "method": [{"name": "__init__", "type": "", "parameter": ["elk_data_source: ES", "date: str", "config", "logger", "**kwargs"]}, {"name": "start", "type": "", "parameter": []}, {"name": "verify_result", "type": "", "parameter": []}, {"name": "_prepare_data", "type": "", "parameter": []}], "attributes": [{"name": "elk_data_source", "type": "", "access_type": ""}, {"name": "config", "type": "", "access_type": ""}, {"name": "date", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}, {"name": "verify_result", "type": "", "access_type": ""}]}

{"filename": "affiliate.py", "name": "Affiliate", "type": "class", "implement": [], "extend": ["(object", " metaclass=ABCMeta)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "get_performance", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "map_to_ipg", "type": "", "parameter": [" data", "id", "order_value", "commision", "status", "cc", "timestamp", "order_id", "currency", "device", "ip", "user_agent", "source", "affiliate_network", "deal_type", "exit_url", "merchant_name", "merchant_id"]}], "attributes": []}

{"filename": "accesstrade_id.py", "name": "AccessTradeID", "type": "class", "implement": [], "extend": ["(Affiliate)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "url", "type": "", "access_type": ""}, {"name": "username", "type": "", "access_type": ""}, {"name": "password", "type": "", "access_type": ""}, {"name": "site_code", "type": "", "access_type": ""}]}

{"filename": "accesstrade_th.py", "name": "AccessTradeTH", "type": "class", "implement": [], "extend": ["(Affiliate)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__build_jwt_token", "type": "", "parameter": []}, {"name": "__get_api_timestamp", "type": "", "parameter": []}, {"name": "__get_authentication_info", "type": "", "parameter": []}, {"name": "__build_auth_header", "type": "", "parameter": []}, {"name": "__send_request", "type": "", "parameter": [" endpoint", " headers=None", " params=None"]}, {"name": "__parse", "type": "", "parameter": [" transactions"]}, {"name": "__parse_atth_params", "type": "", "parameter": [" params", " searched_param", " default_value=''"]}, {"name": "__parse_status", "type": "", "parameter": [" status"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "username", "type": "", "access_type": ""}, {"name": "password", "type": "", "access_type": ""}, {"name": "site_code", "type": "", "access_type": ""}, {"name": "report_period_base", "type": "", "access_type": ""}, {"name": "valid_statuses", "type": "", "access_type": ""}, {"name": "api_endpoint", "type": "", "access_type": ""}, {"name": "api_auth_algorithm", "type": "", "access_type": ""}]}

{"filename": "accesstrade_vn.py", "name": "AccessTradeVN", "type": "class", "implement": [], "extend": ["(Affiliate)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__request", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__detect_device", "type": "", "parameter": [" os", " browser"]}, {"name": "__detect_status", "type": "", "parameter": [" status"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "url", "type": "", "access_type": ""}, {"name": "api_version", "type": "", "access_type": ""}, {"name": "access_key", "type": "", "access_type": ""}, {"name": "limit", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "adayroi.py", "name": "Adayroi", "type": "class", "implement": [], "extend": ["(HasOffers)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_performance", "type": "", "parameter": [" start_date", " end_date"]}], "attributes": []}

{"filename": "admitad.py", "name": "Admitad", "type": "class", "implement": [], "extend": ["(Affiliate)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__request", "type": "", "parameter": [" start_date", " end_date", " api_method"]}, {"name": "__get_token", "type": "", "parameter": []}, {"name": "__detect_cc", "type": "", "parameter": [" refer", " website_name"]}, {"name": "__detect_status", "type": "", "parameter": [" status"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "url", "type": "", "access_type": ""}, {"name": "client_id", "type": "", "access_type": ""}, {"name": "client_secret", "type": "", "access_type": ""}, {"name": "scope", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "affiliategateway_asia.py", "name": "AffiliateGatewayAsia", "type": "class", "implement": [], "extend": ["(AffiliateGateway)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}], "attributes": []}

{"filename": "affiliategateway_sg.py", "name": "AffiliateGatewaySG", "type": "class", "implement": [], "extend": ["(AffiliateGateway)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}], "attributes": []}

{"filename": "awin.py", "name": "Awin", "type": "class", "implement": [], "extend": ["(Affiliate)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__request_advertisers", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__request_transactions", "type": "", "parameter": [" start_date", " end_date", " advertisers"]}, {"name": "__parse_request", "type": "", "parameter": [" endpoint", " payload", " max_retries=3"]}, {"name": "__detect_status", "type": "", "parameter": [" status"]}, {"name": "__detect_clickref", "type": "", "parameter": [" click_refs"]}, {"name": "__detect_cc", "type": "", "parameter": [" customer_country", " referer"]}, {"name": "__detect_device", "type": "", "parameter": [" device_name"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "publisher_id", "type": "", "access_type": ""}, {"name": "api_url", "type": "", "access_type": ""}, {"name": "api_key", "type": "", "access_type": ""}, {"name": "timezone", "type": "", "access_type": ""}]}

{"filename": "berrybenka.py", "name": "BerryBenka", "type": "class", "implement": [], "extend": ["(HasOffers)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_performance", "type": "", "parameter": [" start_date", " end_date"]}], "attributes": []}

{"filename": "blibli.py", "name": "BliBli", "type": "class", "implement": [], "extend": ["(HasOffers)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_performance", "type": "", "parameter": [" start_date", " end_date"]}], "attributes": []}

{"filename": "bukalapak.py", "name": "Bukalapak", "type": "class", "implement": [], "extend": ["(HasOffers)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_performance", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "parse_cps", "type": "", "parameter": [" data"]}], "attributes": []}

{"filename": "centralonline.py", "name": "CentralOnline", "type": "class", "implement": [], "extend": ["(HasOffers)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_performance", "type": "", "parameter": [" start_date", " end_date"]}], "attributes": []}

{"filename": "chinesean.py", "name": "Chinesean", "type": "class", "implement": [], "extend": ["(Affiliate)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__download", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__detect_commission", "type": "", "parameter": [" commission"]}, {"name": "__detect_currency", "type": "", "parameter": [" commission"]}, {"name": "__detect_cc", "type": "", "parameter": [" website"]}, {"name": "__detect_status", "type": "", "parameter": [" status", " value"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "url", "type": "", "access_type": ""}, {"name": "username", "type": "", "access_type": ""}, {"name": "password", "type": "", "access_type": ""}, {"name": "countries_websites", "type": "", "access_type": ""}]}

{"filename": "commissionfactory.py", "name": "CommissionFactory", "type": "class", "implement": [], "extend": ["(Affiliate)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__request", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__detect_cc", "type": "", "parameter": [" traffic_source"]}, {"name": "__detect_status", "type": "", "parameter": [" status"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "url", "type": "", "access_type": ""}, {"name": "api_version", "type": "", "access_type": ""}, {"name": "api_key", "type": "", "access_type": ""}]}

{"filename": "commissionjunction.py", "name": "CommissionJunction", "type": "class", "implement": [], "extend": ["(Affiliate)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__request", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__detect_cc", "type": "", "parameter": [" website_id", " advertiser"]}, {"name": "__detect_status", "type": "", "parameter": [" status", " value"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "url", "type": "", "access_type": ""}, {"name": "api_version", "type": "", "access_type": ""}, {"name": "private_key", "type": "", "access_type": ""}, {"name": "websites_ids_countries", "type": "", "access_type": ""}]}

{"filename": "ecomobi.py", "name": "Ecomobi", "type": "class", "implement": [], "extend": ["(Affiliate)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__request_advertisers", "type": "", "parameter": []}, {"name": "__request_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__parse_request", "type": "", "parameter": [" endpoint", " payload", " max_retries=3"]}, {"name": "__detect_status", "type": "", "parameter": [" status"]}, {"name": "__detect_cc", "type": "", "parameter": [" customer_country"]}, {"name": "__extract_currency", "type": "", "parameter": [" items"]}, {"name": "__extract_commission", "type": "", "parameter": [" items"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "api_url", "type": "", "access_type": ""}, {"name": "api_token_private", "type": "", "access_type": ""}, {"name": "api_token", "type": "", "access_type": ""}, {"name": "statuses", "type": "", "access_type": ""}, {"name": "page_size", "type": "", "access_type": ""}]}

{"filename": "impactradius.py", "name": "ImpactRadius", "type": "class", "implement": [], "extend": ["(Affiliate)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__request_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__parse_request", "type": "", "parameter": [" endpoint", " payload", " max_retries=3"]}, {"name": "__detect_device", "type": "", "parameter": [" device"]}, {"name": "__lookup_device", "type": "", "parameter": [" find_device", " devices"]}, {"name": "__detect_status", "type": "", "parameter": [" status"]}, {"name": "__detect_cc", "type": "", "parameter": [" currency", " referer"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "account_sid", "type": "", "access_type": ""}, {"name": "auth_key", "type": "", "access_type": ""}, {"name": "api_url", "type": "", "access_type": ""}, {"name": "statuses", "type": "", "access_type": ""}, {"name": "retry_times", "type": "", "access_type": ""}, {"name": "page_size", "type": "", "access_type": ""}]}

{"filename": "involveasia.py", "name": "InvolveAsia", "type": "class", "implement": [], "extend": ["(Affiliate)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__request", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__authenticate", "type": "", "parameter": []}, {"name": "__request_page", "type": "", "parameter": [" start_date", " end_date", " page", " token"]}, {"name": "__detect_cc", "type": "", "parameter": [" refer"]}, {"name": "__detect_status", "type": "", "parameter": [" status"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "url", "type": "", "access_type": ""}, {"name": "api_key", "type": "", "access_type": ""}, {"name": "api_secret", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "ipricegroup.py", "name": "IpriceGroup", "type": "class", "implement": [], "extend": ["(HasOffers)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "get_performance", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__detect_test_orders", "type": "", "parameter": [" data"]}, {"name": "__detect_duplicated_orders", "type": "", "parameter": [" data"]}, {"name": "get_existing_conversions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "is_updated_conversion", "type": "", "parameter": [" existing_conversion", " fields"]}, {"name": "upsert_conversion", "type": "", "parameter": [" fields", " conversion_id=None"]}], "attributes": [{"name": "test_orders", "type": "", "access_type": ""}]}

{"filename": "lazada_id.py", "name": "LazadaID", "type": "class", "implement": [], "extend": ["(Lazada)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}], "attributes": []}

{"filename": "lazada_my.py", "name": "LazadaMY", "type": "class", "implement": [], "extend": ["(Lazada)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}], "attributes": []}

{"filename": "lazada_ph.py", "name": "LazadaPH", "type": "class", "implement": [], "extend": ["(Lazada)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}], "attributes": []}

{"filename": "lazada_sg.py", "name": "LazadaSG", "type": "class", "implement": [], "extend": ["(Lazada)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}], "attributes": []}

{"filename": "lazada_th.py", "name": "LazadaTH", "type": "class", "implement": [], "extend": ["(Lazada)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}], "attributes": []}

{"filename": "lazada_vn.py", "name": "LazadaVN", "type": "class", "implement": [], "extend": ["(Lazada)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}], "attributes": []}

{"filename": "mataharimall.py", "name": "MatahariMall", "type": "class", "implement": [], "extend": ["(HasOffers)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_performance", "type": "", "parameter": [" start_date", " end_date"]}], "attributes": []}

{"filename": "omg.py", "name": "Omg", "type": "class", "implement": [], "extend": ["(Affiliate)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__request", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__detect_cc", "type": "", "parameter": [" refer", " merchant", " product", " uid2"]}, {"name": "__detect_status", "type": "", "parameter": [" status"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "url", "type": "", "access_type": ""}, {"name": "api_version", "type": "", "access_type": ""}, {"name": "api_key", "type": "", "access_type": ""}, {"name": "private_key", "type": "", "access_type": ""}, {"name": "affiliate_id", "type": "", "access_type": ""}]}

{"filename": "rakuten.py", "name": "Rakuten", "type": "class", "implement": [], "extend": ["(Affiliate)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__request", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__make_request", "type": "", "parameter": [" url"]}, {"name": "__get_all_networks", "type": "", "parameter": [" networks"]}, {"name": "__detect_device", "type": "", "parameter": [" device", " browser_name"]}], "attributes": [{"name": "url", "type": "", "access_type": ""}, {"name": "affiliate", "type": "", "access_type": ""}, {"name": "api_method", "type": "", "access_type": ""}, {"name": "request_headers", "type": "", "access_type": ""}]}

{"filename": "shopee.py", "name": "Shopee", "type": "class", "implement": [], "extend": ["(HasOffers)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_performance", "type": "", "parameter": [" start_date", " end_date"]}], "attributes": []}

{"filename": "shopstylers.py", "name": "ShopStylers", "type": "class", "implement": [], "extend": ["(HasOffers)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "get_performance", "type": "", "parameter": [" start_date", " end_date"]}], "attributes": []}

{"filename": "uber.py", "name": "Uber", "type": "class", "implement": [], "extend": ["(PerformanceHorizon)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}], "attributes": []}

{"filename": "zalora_performancehorizon.py", "name": "Zalora", "type": "class", "implement": [], "extend": ["(PerformanceHorizon)"], "method": [{"name": "__init__", "type": "", "parameter": [" **kwargs"]}], "attributes": []}

{"filename": "affiliategateway.py", "name": "AffiliateGateway", "type": "class", "implement": [], "extend": ["(Affiliate", " metaclass=ABCMeta)"], "method": [{"name": "__init__", "type": "", "parameter": [" affiliate", " url", " username", " password", " **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__request", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__detect_cc", "type": "", "parameter": [" refer", " program", " site_id"]}, {"name": "__detect_status", "type": "", "parameter": [" status"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "url", "type": "", "access_type": ""}, {"name": "username", "type": "", "access_type": ""}, {"name": "password", "type": "", "access_type": ""}, {"name": "countries", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "hasoffers.py", "name": "HasOffers", "type": "class", "implement": [], "extend": ["(Affiliate", " metaclass=ABCMeta)"], "method": [{"name": "__init__", "type": "", "parameter": ["affiliate", "network_id", "api_key", "merchant_name=None", "merchant_id=None", "currency=None", "use_network_api=False", "**kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "get_performance", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "request", "type": "", "parameter": [" params", " start_date", " end_date"]}, {"name": "send_request", "type": "", "parameter": [" params=None"]}, {"name": "parse_cps", "type": "", "parameter": [" data"]}, {"name": "parse_cpc", "type": "", "parameter": [" data"]}, {"name": "detect_cc", "type": "", "parameter": [" refer", " offer", " country", " affsub2", " currency"]}, {"name": "detect_device", "type": "", "parameter": [" browser", " os", " offer"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "url", "type": "", "access_type": ""}, {"name": "network_id", "type": "", "access_type": ""}, {"name": "api_key", "type": "", "access_type": ""}, {"name": "merchant_name", "type": "", "access_type": ""}, {"name": "merchant_id", "type": "", "access_type": ""}, {"name": "currency", "type": "", "access_type": ""}, {"name": "use_network_api", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "lazada.py", "name": "Lazada", "type": "class", "implement": [], "extend": ["(Affiliate", " metaclass=ABCMeta)"], "method": [{"name": "__init__", "type": "", "parameter": ["endpoint", "user_token", "merchant_id", "currency", "**kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__get_conversions", "type": "", "parameter": [" start_date", " end_date", " offer_id"]}, {"name": "__get_offer_ids", "type": "", "parameter": [" expired=False"]}, {"name": "__build_request", "type": "", "parameter": [" endpoint", " method='GET'", " params=None"]}, {"name": "__execute_paginated_request", "type": "", "parameter": [" request"]}, {"name": "__parse", "type": "", "parameter": [" transactions"]}, {"name": "__detect_bonus_trans", "type": "", "parameter": [" offer_name"]}, {"name": "__detect_status", "type": "", "parameter": [" status"]}, {"name": "__detect_device", "type": "", "parameter": [" platform"]}, {"name": "__calc_order_value", "type": "", "parameter": [" payout", " commission_rate"]}], "attributes": [{"name": "endpoint", "type": "", "access_type": ""}, {"name": "app_key", "type": "", "access_type": ""}, {"name": "app_secret", "type": "", "access_type": ""}, {"name": "offer_type", "type": "", "access_type": ""}, {"name": "page_limit", "type": "", "access_type": ""}, {"name": "affiliate", "type": "", "access_type": ""}, {"name": "network_id", "type": "", "access_type": ""}, {"name": "merchant_name", "type": "", "access_type": ""}, {"name": "merchant_id", "type": "", "access_type": ""}, {"name": "currency", "type": "", "access_type": ""}, {"name": "default_params", "type": "", "access_type": ""}, {"name": "client", "type": "", "access_type": ""}]}

{"filename": "performancehorizon.py", "name": "PerformanceHorizon", "type": "class", "implement": [], "extend": ["(Affiliate", " metaclass=ABCMeta)"], "method": [{"name": "__init__", "type": "", "parameter": [" affiliate", " url", " convert_currency=None", " **kwargs"]}, {"name": "get_transactions", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "request", "type": "", "parameter": [" start_date", " end_date"]}, {"name": "__detect_bonus_trans", "type": "", "parameter": [" ref_partnership_model"]}, {"name": "__parse_device", "type": "", "parameter": [" device"]}], "attributes": [{"name": "affiliate", "type": "", "access_type": ""}, {"name": "url", "type": "", "access_type": ""}, {"name": "limit", "type": "", "access_type": ""}, {"name": "convert_currency", "type": "", "access_type": ""}, {"name": "logger", "type": "", "access_type": ""}]}

{"filename": "JsonFormatter.py", "name": "JsonFormatter", "type": "class", "implement": [], "extend": ["(Formatter)"], "method": [{"name": "__init__", "type": "", "parameter": [" component=None"]}, {"name": "format", "type": "", "parameter": [" record"]}], "attributes": [{"name": "component", "type": "", "access_type": ""}]}

{"filename": "AbstractDataSource.py", "name": "AbstractDataSource", "type": "class", "implement": [], "extend": ["(ABC)"], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "get_aggregations", "type": "", "parameter": [" query: Query"]}], "attributes": []}

{"filename": "ESDataSource.py", "name": "ESDataSource", "type": "class", "implement": [], "extend": ["(AbstractDataSource)"], "method": [{"name": "__init__", "type": "", "parameter": [" host", " index"]}, {"name": "get_aggregations", "type": "", "parameter": [" query: Query"]}, {"name": "get_aggregations_paging", "type": "", "parameter": [" query: Query", " page_size=PAGE_SIZE"]}, {"name": "_get_first_group_list", "type": "", "parameter": [" query: Query"]}, {"name": "_parse_aggregations", "type": "", "parameter": [" result", " groups", " metrics", " record=None", " output=None"]}, {"name": "_nested_get", "type": "", "parameter": [" data", " key"]}], "attributes": [{"name": "index", "type": "", "access_type": ""}, {"name": "es", "type": "", "access_type": ""}, {"name": "_parse_aggregations", "type": "", "access_type": ""}]}

{"filename": "AbstractGenerator.py", "name": "AbstractGenerator", "type": "class", "implement": [], "extend": ["(ABC)"], "method": [{"name": "__init__", "type": "", "parameter": [" datasource: AbstractDataSource", " language='en'"]}, {"name": "generate", "type": "", "parameter": [" aggregate=None"]}, {"name": "gender_url", "type": "", "parameter": [" gender"]}, {"name": "_normalize_text", "type": "", "parameter": [" text: str"]}], "attributes": [{"name": "language", "type": "", "access_type": ""}, {"name": "datasource", "type": "", "access_type": ""}]}

{"filename": "Brand.py", "name": "Brand", "type": "class", "implement": [], "extend": ["(AbstractGenerator)"], "method": [{"name": "generate", "type": "", "parameter": [" aggregate=None"]}], "attributes": []}

{"filename": "Category.py", "name": "Category", "type": "class", "implement": [], "extend": ["(AbstractGenerator)"], "method": [{"name": "generate", "type": "", "parameter": [" aggregate=None"]}], "attributes": []}

{"filename": "Comparable.py", "name": "Comparable", "type": "class", "implement": [], "extend": ["(AbstractGenerator)"], "method": [{"name": "generate", "type": "", "parameter": [" aggregate=None"]}, {"name": "make_parent", "type": "", "parameter": [" query: Query"]}, {"name": "make_variants", "type": "", "parameter": [" query"]}, {"name": "_aggregate_parent", "type": "", "parameter": [" query: Query"]}, {"name": "_aggregate_variant", "type": "", "parameter": [" query: Query", " level"]}, {"name": "_format", "type": "", "parameter": [" data"]}], "attributes": [{"name": "field_brand", "type": "", "access_type": ""}, {"name": "field_series", "type": "", "access_type": ""}, {"name": "field_model", "type": "", "access_type": ""}]}

{"filename": "Filtered.py", "name": "Filtered", "type": "class", "implement": [], "extend": ["(AbstractGenerator)"], "method": [{"name": "generate", "type": "", "parameter": [" aggregate=None"]}, {"name": "_pregroup_by_brand", "type": "", "parameter": [" query: Query"]}, {"name": "_pregroup_by_gender", "type": "", "parameter": [" query: Query"]}, {"name": "_pregroup_by_category", "type": "", "parameter": [" query: Query"]}, {"name": "_pregroup_by_series", "type": "", "parameter": [" query: Query"]}, {"name": "_generate_category_gender", "type": "", "parameter": [" query"]}, {"name": "_generate_brand_category", "type": "", "parameter": [" query"]}, {"name": "_generate_brand_gender", "type": "", "parameter": [" query"]}, {"name": "_generate_brand_series", "type": "", "parameter": [" query"]}, {"name": "_generate_brand_category_gender", "type": "", "parameter": [" query"]}, {"name": "_generate_brand_category_series", "type": "", "parameter": [" query"]}], "attributes": [{"name": "_pregroup_by_gender", "type": "", "access_type": ""}, {"name": "_pregroup_by_category", "type": "", "access_type": ""}, {"name": "_pregroup_by_brand", "type": "", "access_type": ""}, {"name": "_pregroup_by_series", "type": "", "access_type": ""}]}

{"filename": "Store.py", "name": "Store", "type": "class", "implement": [], "extend": ["(AbstractGenerator)"], "method": [{"name": "generate", "type": "", "parameter": [" aggregate=None"]}], "attributes": []}

{"filename": "Aggregate.py", "name": "Aggregate", "type": "class", "implement": [], "extend": ["()"], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "group_by", "type": "", "parameter": [" field", " alias", " properties={}"]}, {"name": "pregroup_by", "type": "", "parameter": [" field", " alias", " properties={}"]}, {"name": "add_metric", "type": "", "parameter": [" field", " alias", " operation", " properties={}"]}], "attributes": [{"name": "groups", "type": "", "access_type": ""}, {"name": "metrics", "type": "", "access_type": ""}]}

{"filename": "Query.py", "name": "Query", "type": "class", "implement": [], "extend": ["()"], "method": [{"name": "__init__", "type": "", "parameter": [" query", " aggregate: Aggregate", " size=0"]}, {"name": "_build_aggregations_query", "type": "", "parameter": []}, {"name": "get_query", "type": "", "parameter": []}], "attributes": [{"name": "size", "type": "", "access_type": ""}, {"name": "query", "type": "", "access_type": ""}, {"name": "aggregate", "type": "", "access_type": ""}]}

{"filename": "merchant_filter_config.py", "name": "MerchantFilterConfig", "type": "class", "implement": [], "extend": ["()"], "method": [{"name": "__init__", "type": "", "parameter": ["default_filters: dict = {}", "overwrite_merchant_filters: dict = {}"]}, {"name": "get_by_merchant", "type": "", "parameter": [" merchant: Merchant"]}, {"name": "__set_merchants_filters", "type": "", "parameter": [" overwrite_merchant_filters: dict"]}, {"name": "__set_merchant_filter", "type": "", "parameter": [" merchant_filters_config: dict"]}], "attributes": [{"name": "filter", "type": "", "access_type": ""}, {"name": "__set_merchants_filters", "type": "", "access_type": ""}]}

{"filename": "partner_query.py", "name": "Query", "type": "class", "implement": [], "extend": ["(AbstractQuery)"], "method": [{"name": "__init__", "type": "", "parameter": ["source_fields: list", "merchant_filter_config: MerchantFilterConfig", "merchant_filter: dict", "cc: str", "db: str", "table: str", "**kwargs"]}, {"name": "get_query", "type": "", "parameter": [" partner: str", " merchant: Merchant"]}, {"name": "get_merchants_query", "type": "", "parameter": []}, {"name": "_get_limit_per_merchant", "type": "", "parameter": [" merchant: Merchant"]}, {"name": "_get_select", "type": "", "parameter": [" **kwargs"]}, {"name": "_get_skip_order_by", "type": "", "parameter": [" merchant: Merchant"]}, {"name": "_apply_filter", "type": "", "parameter": ["query: str", "merchant: Merchant", "product_table_alias: str"]}, {"name": "_apply_order_by", "type": "", "parameter": [" query: str", " field: str", " keyword: str"]}, {"name": "_apply_limit", "type": "", "parameter": [" query: str", " limit: int"]}, {"name": "__format_sql_str", "type": "", "parameter": [" sql: str"]}, {"name": "__init__", "type": "", "parameter": ["merchant_filter_config: MerchantFilterConfig", "cc: str", "db: str", "table: str", "comparable_table: str", "ruspark_table: str", "**kwargs"]}, {"name": "get_query", "type": "", "parameter": [" partner: str", " merchant: Merchant"]}, {"name": "get_merchant_dump_query", "type": "", "parameter": [" merchant_dump_source_fields"]}], "attributes": [{"name": "merchant_filter_config", "type": "", "access_type": ""}, {"name": "cc", "type": "", "access_type": ""}, {"name": "db", "type": "", "access_type": ""}, {"name": "table", "type": "", "access_type": ""}, {"name": "merchant_filter", "type": "", "access_type": ""}, {"name": "source_fields", "type": "", "access_type": ""}, {"name": "comparable_table", "type": "", "access_type": ""}, {"name": "ruspark_table", "type": "", "access_type": ""}]}

{"filename": "ga_predictor.py", "name": "GAPredictor", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "predict_lvl0_acquisition", "type": "", "parameter": [" data: pandas.DataFrame"]}, {"name": "predict_lvl0_conversion", "type": "", "parameter": [" data_conversion: pandas.DataFrame", " data_acquisition: pandas.DataFrame"]}, {"name": "__label_missing_data", "type": "", "parameter": [" data", " mark"]}, {"name": "__predict_data_by_column", "type": "", "parameter": [" data", " predict_column"]}, {"name": "__global_distribution", "type": "", "parameter": [" data", " predict_column"]}, {"name": "__copy_lvl0_category_to_conversion", "type": "", "parameter": [" df_conversion", " df_acquisition", " predict_column"]}, {"name": "__build_ga_match", "type": "", "parameter": [" df", " cc", " date", " landing_page_path", " device", " website", " product", " sub_product"]}], "attributes": [{"name": "value_column", "type": "", "access_type": ""}, {"name": "predict_column", "type": "", "access_type": ""}, {"name": "values_to_replace", "type": "", "access_type": ""}, {"name": "product_types_predicting", "type": "", "access_type": ""}]}

{"filename": "trans_predictor.py", "name": "TransactionPredictor", "type": "class", "implement": [], "extend": [], "method": [{"name": "__init__", "type": "", "parameter": []}, {"name": "predict", "type": "", "parameter": [" data"]}, {"name": "__predict_cc", "type": "", "parameter": [" data"]}, {"name": "__predict_by_week", "type": "", "parameter": [" data", " predict_column"]}, {"name": "__predict_data_by_column", "type": "", "parameter": [" data", " predict_column"]}], "attributes": [{"name": "identifier_column", "type": "", "access_type": ""}, {"name": "merchant_column", "type": "", "access_type": ""}, {"name": "value_column", "type": "", "access_type": ""}, {"name": "cc_column", "type": "", "access_type": ""}, {"name": "predict_columns", "type": "", "access_type": ""}]}

{"filename": "trending_calculator.py", "name": "TrendingCalculator", "type": "class", "implement": [], "extend": [], "method": [{"name": "calculate", "type": "", "parameter": [" data"]}], "attributes": []}

{"filename": "compiler_test.py", "name": "CompilerTest", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "test_parse_int_from_google_api", "type": "", "parameter": [" value", " expected_value"]}, {"name": "test_parse_float_from_google_api", "type": "", "parameter": [" value", " expected_value"]}, {"name": "test_camel_case_to_snake_case", "type": "", "parameter": [" name: str", " expected_snake_case: str"]}], "attributes": [{"name": "assertEqual", "type": "", "access_type": ""}]}

{"filename": "content_test.py", "name": "ContentTest", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "test_get_selectors_map_by_sample_n_mapping", "type": "", "parameter": [" es_hits: dict", " mapping: dict", " selector_map: dict"]}], "attributes": [{"name": "assertDictEqual", "type": "", "access_type": ""}]}

{"filename": "filter_test.py", "name": "TestFilters", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "test_nested_include_list", "type": "", "parameter": []}, {"name": "test_none_include_list", "type": "", "parameter": []}, {"name": "test_nested_exclude_list", "type": "", "parameter": []}, {"name": "test_empty_include_list", "type": "", "parameter": []}, {"name": "test_empty_exclude_list", "type": "", "parameter": []}, {"name": "test_not_include_list", "type": "", "parameter": []}, {"name": "test_not_exclude_list", "type": "", "parameter": []}, {"name": "test_include_list_single_number", "type": "", "parameter": []}, {"name": "test_exclude_list_single_number", "type": "", "parameter": []}, {"name": "test_include_list_single_string", "type": "", "parameter": []}, {"name": "test_include_exclude_chain", "type": "", "parameter": []}, {"name": "test_exclude_list_single_string", "type": "", "parameter": []}, {"name": "test_list_include_string", "type": "", "parameter": []}, {"name": "test_list_exclude_number", "type": "", "parameter": []}, {"name": "test_escape_presto_field", "type": "", "parameter": []}, {"name": "test_where_claude", "type": "", "parameter": []}, {"name": "test_filter_neq_string", "type": "", "parameter": []}, {"name": "test_or_cond_neq_string", "type": "", "parameter": []}, {"name": "test_filter_neq_int", "type": "", "parameter": []}, {"name": "test_filter_neq_float", "type": "", "parameter": []}, {"name": "test_filter_neq_string_with_and_clause", "type": "", "parameter": []}, {"name": "test_or_cond_neq_string_with_and_clause", "type": "", "parameter": []}, {"name": "test_filter_eq_string", "type": "", "parameter": []}, {"name": "test_filter_eq_int", "type": "", "parameter": []}, {"name": "test_filter_eq_float", "type": "", "parameter": []}, {"name": "test_filter_wrong_operator", "type": "", "parameter": []}, {"name": "test_filter_eq_string_with_and_clause", "type": "", "parameter": []}, {"name": "test_filter_escape_presto_field", "type": "", "parameter": []}, {"name": "test_filter_gt", "type": "", "parameter": []}, {"name": "test_filter_gt_none_value", "type": "", "parameter": []}, {"name": "test_filter_gt_none_operator", "type": "", "parameter": []}, {"name": "test_filter_gte", "type": "", "parameter": []}, {"name": "test_filter_gte_none_value", "type": "", "parameter": []}, {"name": "test_filter_gte_none_operator", "type": "", "parameter": []}, {"name": "test_filter_lt", "type": "", "parameter": []}, {"name": "test_filter_lt_none_value", "type": "", "parameter": []}, {"name": "test_filter_lt_string_value", "type": "", "parameter": []}, {"name": "test_filter_lte", "type": "", "parameter": []}, {"name": "test_filter_lte_none_value", "type": "", "parameter": []}, {"name": "test_filter_lte_string_value", "type": "", "parameter": []}, {"name": "test_filter_like_string_value", "type": "", "parameter": []}, {"name": "test_filter_not_like_string_value", "type": "", "parameter": []}, {"name": "test_filter_like_none_value", "type": "", "parameter": []}, {"name": "test_filter_like_none_operator", "type": "", "parameter": []}, {"name": "test_validate_columns", "type": "", "parameter": []}, {"name": "test_or_condition", "type": "", "parameter": []}, {"name": "test_multiple_or_condition", "type": "", "parameter": []}, {"name": "test_group_condition", "type": "", "parameter": []}, {"name": "and_group", "type": "", "parameter": ["filter: Filter"]}, {"name": "test_empty_and_group_condition", "type": "", "parameter": []}, {"name": "and_group", "type": "", "parameter": ["filter: Filter"]}, {"name": "test_empty_or_group_condition", "type": "", "parameter": []}, {"name": "and_group", "type": "", "parameter": ["filter: Filter"]}, {"name": "test_and_or_group_condition", "type": "", "parameter": []}, {"name": "and_group", "type": "", "parameter": ["filter: Filter"]}, {"name": "test_or_group_condition", "type": "", "parameter": []}, {"name": "or_group", "type": "", "parameter": ["filter: Filter"]}, {"name": "test_apply_dynamic_config_filter", "type": "", "parameter": []}, {"name": "test_apply_dynamic_config_filter_or_cond", "type": "", "parameter": []}, {"name": "test_apply_dynamic_config_filter_grouped", "type": "", "parameter": []}, {"name": "test_apply_dynamic_config_filter_or_grouped", "type": "", "parameter": []}, {"name": "test_apply_dynamic_config_filter_ip_15378_final_config", "type": "", "parameter": []}, {"name": "test_apply_dynamic_config_in_operation", "type": "", "parameter": []}, {"name": "test_apply_dynamic_config_like_operation", "type": "", "parameter": []}, {"name": "test_apply_dynamic_config_filter_full", "type": "", "parameter": []}, {"name": "test_apply_dynamic_config_or_filter_full", "type": "", "parameter": []}, {"name": "test_apply_dynamic_config_complicate_example", "type": "", "parameter": []}, {"name": "test_apply_dynamic_config_or_query_for_complicate_config", "type": "", "parameter": []}], "attributes": [{"name": "assertEqual", "type": "", "access_type": ""}]}

{"filename": "dynamic_filter_interpreter_test.py", "name": "DynamicFilterInterpreterTest", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "test_dynamic_filter_interpreter_empty_config", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_invalid_arg", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_invalid_node_name", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_single_config", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_single_config_with_exist_query", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_2_and_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_2_or_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_3_and_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_3_and_or_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_and_group_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_or_group_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_deep_and_group_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_multilevel_and_group_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_multilevel_or_group_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_interpreter_complicate_config", "type": "", "parameter": []}], "attributes": [{"name": "assertEqual", "type": "", "access_type": ""}, {"name": "assertRaises", "type": "", "access_type": ""}]}

{"filename": "dynamic_filter_lexer_test.py", "name": "DynamicFilterLexerTest", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "test_array_dynamic_fitler_lexer_empty_config", "type": "", "parameter": []}, {"name": "test_array_dynamic_fitler_lexer_1_expr_op", "type": "", "parameter": []}, {"name": "test_array_dynamic_fitler_lexer_2_and_expr_op", "type": "", "parameter": []}, {"name": "test_array_dynamic_fitler_lexer_2_or_expr_op", "type": "", "parameter": []}, {"name": "test_array_dynamic_fitler_lexer_1_or_group_op", "type": "", "parameter": []}, {"name": "test_array_dynamic_fitler_lexer_1_and_group_op", "type": "", "parameter": []}, {"name": "test_array_dynamic_fitler_lexer_multilevel_or_group_op", "type": "", "parameter": []}, {"name": "test_array_dynamic_fitler_lexer_multilevel_or_group_op", "type": "", "parameter": []}, {"name": "test_array_dynamic_fitler_complicate_config", "type": "", "parameter": []}], "attributes": [{"name": "assertSequenceEqual", "type": "", "access_type": ""}]}

{"filename": "dynamic_filter_parser_test.py", "name": "DynamicFilterParserTest", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "test_dynamic_fitler_parser_invalid_syntax", "type": "", "parameter": []}, {"name": "test_dynamic_fitler_parser_empty_config", "type": "", "parameter": []}, {"name": "test_dynamic_filter_parser_single_config", "type": "", "parameter": []}, {"name": "test_dynamic_filter_parser_2_and_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_parser_2_or_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_parser_3_and_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_parser_3_and_or_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_parser_and_group_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_parser_or_group_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_parser_and_group_expr_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_parser_multilevel_or_group_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_parser_multilevel_and_group_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_parser_multilevel_or_group_op", "type": "", "parameter": []}, {"name": "test_dynamic_filter_parser_complicate_config", "type": "", "parameter": []}], "attributes": [{"name": "assertRaises", "type": "", "access_type": ""}, {"name": "assertEqual", "type": "", "access_type": ""}]}

{"filename": "catalog_test.py", "name": "TestDump", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "setUp", "type": "", "parameter": []}, {"name": "tearDown", "type": "", "parameter": []}, {"name": "_get_catalog", "type": "", "parameter": [" esDataSources: mock.MagicMock = None"]}, {"name": "test_scan", "type": "", "parameter": []}, {"name": "test_variants_overwrite_if_exist", "type": "", "parameter": []}, {"name": "test_variants_one_element_with_one_characteristic", "type": "", "parameter": []}, {"name": "test_variants_one_element_with_two_characteristic", "type": "", "parameter": []}, {"name": "test_variants_one_element_with_three_characteristic", "type": "", "parameter": []}, {"name": "test_variants_two_element_with_three_characteristic", "type": "", "parameter": []}], "attributes": [{"name": "assertTrue", "type": "", "access_type": ""}, {"name": "assertEqual", "type": "", "access_type": ""}]}

{"filename": "comparable_test.py", "name": "TestDump", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "setUp", "type": "", "parameter": []}, {"name": "tearDown", "type": "", "parameter": []}, {"name": "test_scan", "type": "", "parameter": [" es_data_sources"]}], "attributes": [{"name": "assertTrue", "type": "", "access_type": ""}, {"name": "assertEqual", "type": "", "access_type": ""}]}

{"filename": "main_test.py", "name": "GAMainFlowTest", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "get_historical_data", "type": "", "parameter": ["total_records: int"]}, {"name": "get_data_frame_with_len", "type": "", "parameter": ["n: int"]}, {"name": "setUp", "type": "", "parameter": []}, {"name": "test_start_query_data_from_ga_then_process", "type": "", "parameter": []}, {"name": "test_exclude_partners", "type": "", "parameter": []}, {"name": "test_get_ga_params", "type": "", "parameter": []}, {"name": "test_should_store_data", "type": "", "parameter": [" mock_get_config"]}, {"name": "test_store", "type": "", "parameter": [" mock_get_config"]}, {"name": "test_check_data_doesnt_raise_exception_when_drop_is_below_threshold", "type": "", "parameter": []}, {"name": "test_check_data_raises_exception_when_drop_is_above_threshold", "type": "", "parameter": []}, {"name": "__assert_historical_data_history_query", "type": "", "parameter": []}], "attributes": [{"name": "addCleanup", "type": "", "access_type": ""}, {"name": "mock_ga_extractor", "type": "", "access_type": ""}, {"name": "mock_data_store", "type": "", "access_type": ""}, {"name": "mock_elk_source", "type": "", "access_type": ""}, {"name": "mock_logger", "type": "", "access_type": ""}, {"name": "ga_main_flow", "type": "", "access_type": ""}, {"name": "assertIsInstance", "type": "", "access_type": ""}, {"name": "assertDictEqual", "type": "", "access_type": ""}, {"name": "assertEqual", "type": "", "access_type": ""}, {"name": "assertTrue", "type": "", "access_type": ""}, {"name": "assertFalse", "type": "", "access_type": ""}, {"name": "__assert_historical_data_history_query", "type": "", "access_type": ""}]}

{"filename": "catalog_test.py", "name": "CatalogTest", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "setUp", "type": "", "parameter": []}, {"name": "tearDown", "type": "", "parameter": []}, {"name": "test_get_parameters", "type": "", "parameter": []}], "attributes": [{"name": "assertListEqual", "type": "", "access_type": ""}]}

{"filename": "comparable_test.py", "name": "ComparableTest", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "setUp", "type": "", "parameter": []}, {"name": "tearDown", "type": "", "parameter": []}, {"name": "test_get_parameters", "type": "", "parameter": []}], "attributes": [{"name": "assertListEqual", "type": "", "access_type": ""}]}

{"filename": "main_test.py", "name": "TestMain", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "map_field", "type": "", "parameter": [" df: pd.DataFrame"]}, {"name": "test_process", "type": "", "parameter": [" mock_read_parquet: MagicMock", " mock_s3_storage_class: MagicMock"]}], "attributes": [{"name": "assertEqual", "type": "", "access_type": ""}, {"name": "assertListEqual", "type": "", "access_type": ""}]}

{"filename": "merchant_filter_config_test.py", "name": "MerchantFilterConfigTest", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "test_get_by_merchant", "type": "", "parameter": []}], "attributes": []}

{"filename": "config_parser_test.py", "name": "ConfigParserTest", "type": "class", "implement": [], "extend": ["(TestCase)"], "method": [{"name": "get_merchant_config", "type": "", "parameter": []}, {"name": "test_get_by_regex", "type": "", "parameter": []}, {"name": "test_get_empty_by_regex", "type": "", "parameter": []}], "attributes": [{"name": "assertIn", "type": "", "access_type": ""}, {"name": "assertDictEqual", "type": "", "access_type": ""}]}

